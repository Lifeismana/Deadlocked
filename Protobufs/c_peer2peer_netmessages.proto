import "netmessages.proto";
import "networkbasetypes.proto";

enum P2P_Messages {
	p2p_TextMessage = 256;
	p2p_Voice = 257;
	p2p_Ping = 258;
	p2p_VRAvatarPosition = 259;
	p2p_WatchSynchronization = 260;
	p2p_FightingGame_GameData = 261;
	p2p_FightingGame_Connection = 262;
}

message CP2P_TextMessage {
	optional bytes text = 1;
}

message CSteam_Voice_Encoding {
	optional bytes voice_data = 1;
}

message CP2P_Voice {
	enum Handler_Flags {
		Played_Audio = 1;
	}

	optional .CMsgVoiceAudio audio = 1;
	optional uint32 broadcast_group = 2;
}

message CP2P_Ping {
	required uint64 send_time = 1;
	required bool is_reply = 2;
}

message CP2P_VRAvatarPosition {
	message COrientation {
		optional .CMsgVector pos = 1;
		optional .CMsgQAngle ang = 2;
	}

	repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
	optional int32 hat_id = 2;
	optional int32 scene_id = 3;
	optional int32 world_scale = 4;
}

message CP2P_WatchSynchronization {
	optional int32 demo_tick = 1;
	optional bool paused = 2;
	optional uint64 tv_listen_voice_indices = 3;
	optional int32 dota_spectator_mode = 4;
	optional bool dota_spectator_watching_broadcaster = 5;
	optional int32 dota_spectator_hero_index = 6;
	optional int32 dota_spectator_autospeed = 7;
	optional int32 dota_replay_speed = 8;
}

message CMsgFightingGame_GameData_Fighting {
	message InputSample {
		optional uint32 button_mask = 1;
	}

	optional int32 last_acked_frame = 1;
	optional uint32 player_id = 2;
	optional int32 last_crc_frame = 3;
	optional uint32 last_crc_value = 4;
	optional float now = 5;
	optional float peer_ack_time = 6;
	optional int32 input_start_frame = 7;
	repeated .CMsgFightingGame_GameData_Fighting.InputSample input_sample = 8;
}

message CMsgFightingGame_GameData_CharacterSelect {
	optional uint32 cursor_index = 1;
	optional uint32 selected_hero_id = 2;
	optional uint32 selected_style = 3;
	repeated uint32 econ_item_refs = 4;
}

message CMsgFightingGame_GameData_Loaded {
	optional float now = 1;
	optional float peer_ack_time = 2;
	optional float proposed_start_time = 3;
	optional float accepted_start_time = 4;
}

message CP2P_FightingGame_GameData {
	enum EState {
		k_ChoosingCharacter = 1;
		k_Loaded = 2;
		k_Fighting = 3;
	}

	optional .CP2P_FightingGame_GameData.EState state = 1 [default = k_ChoosingCharacter];

	oneof state_data {
		.CMsgFightingGame_GameData_Fighting fight = 2;
		.CMsgFightingGame_GameData_CharacterSelect character_select = 3;
		.CMsgFightingGame_GameData_Loaded loaded = 4;
	}
}
