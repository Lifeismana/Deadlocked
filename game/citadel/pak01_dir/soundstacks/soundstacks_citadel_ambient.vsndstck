<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
	citadel_ambient_rand = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					random_position_base = 
					{
						data_type = "enum"
						enum_decl = 
						{
							value = 
							[
								"player_position",
								"entity_position",
							]
						}
						value = "player_position"
					}
					random_soundevent_name = 
					{
						data_type = "string"
						value = "default.null"
					}
					random_soundevent_timer_min = 
					{
						data_type = "float"
						value = "4.000000"
					}
					random_soundevent_timer_max = 
					{
						data_type = "float"
						value = "10.000000"
					}
					position = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
					}
					position_random = 
					{
						data_type = "float"
						value = "0.000000"
					}
					rand_radius_min = 
					{
						data_type = "float"
						value = "0.000000"
					}
					rand_radius_max = 
					{
						data_type = "float"
						value = "250.000000"
					}
					volume_atten = 
					{
						data_type = "float"
						value = "1.000000"
					}
					use_initial_random_offset = 
					{
						data_type = "float"
						value = "0.000000"
					}
					cull_at_distance = 
					{
						data_type = "float"
						value = "0.000000"
					}
				}
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "globals"
				operator = "get_system_globals"
				input_execute = "1"
				input_listener_index = "0"
			},
			
			{
				name = "random_delay"
				operator = "math_random_float"
				input_execute = "1.0"
				input_min = "@public.random_soundevent_timer_min"
				input_max = "@public.random_soundevent_timer_max"
				round_to_int = "0"
			},
			
			{
				name = "one_time_random"
				operator = "math_random_float"
				execute_once = "true"
				input_execute = "@public.use_initial_random_offset"
				input_min = "0"
				input_max = "@random_delay.output"
				round_to_int = "0"
			},
			
			{
				name = "first_execution_check"
				operator = "math_float"
				apply = "less_than_or_equal"
				input1 = "@get_event_info.output_elapsed_time"
				input2 = "0.05"
			},
			
			{
				name = "one_time_random_enabled_check"
				operator = "math_float"
				apply = "min"
				input1 = "@first_execution_check.output"
				input2 = "@public.use_initial_random_offset"
			},
			
			{
				name = "switch_one_time_and_random"
				operator = "ctrl_switch_float"
				input_switch = "@one_time_random_enabled_check.output"
				input1 = "@random_delay.output"
				input2 = "@one_time_random.output"
			},
			
			{
				name = "set_dependency"
				operator = "soundevent_control"
				input_add_dependent = "@get_event_info.output_unstopped"
			},
			
			{
				name = "set_wait"
				operator = "soundevent_control"
				input_execute = "@get_event_info.output_unstopped"
				input_wait_time = "@switch_one_time_and_random.output"
			},
			
			{
				name = "listener_or_entity_position"
				operator = "ctrl_switch_float3"
				input_switch = "@public.random_position_base"
				input1 = "@globals.output_listener_front"
				input2 = "@public.position"
			},
			
			{
				name = "get_random_pos"
				operator = "math_random_float3"
				input_execute = "@public.position_random"
				input_radius_min = "@public.rand_radius_min"
				input_radius_max = "@public.rand_radius_max"
				input_position = "@listener_or_entity_position.output"
			},
			
			{
				name = "random_or_passed_position"
				operator = "ctrl_switch_float3"
				input_switch = "@public.position_random"
				input1 = "@public.position"
				input2 = "@get_random_pos.output"
			},
			
			{
				name = "culling_enabled"
				operator = "math_float"
				execute_once = "true"
				apply = "greater_than"
				input1 = "@public.cull_at_distance"
				input2 = "0.000000"
			},
			
			{
				name = "distance_to_listener"
				operator = "calc_distance"
				input_execute = "@culling_enabled.output"
				execute_once = "false"
				input_position1 = "@random_or_passed_position.output"
				input_position2 = "@globals.output_listener_position"
			},
			
			{
				name = "inside_cull_range"
				operator = "math_float"
				input_execute = "@culling_enabled.output"
				apply = "less_than_or_equal"
				input1 = "@distance_to_listener.output"
				input2 = "@public.cull_at_distance"
			},
			
			{
				name = "inside_cull_range_and_unstopped"
				operator = "math_float"
				input_execute = "@culling_enabled.output"
				apply = "min"
				input1 = "@inside_cull_range.output"
				input2 = "@get_event_info.output_unstopped"
			},
			
			{
				name = "should_start_soundevent_switch"
				operator = "ctrl_switch_float"
				input_switch = "@culling_enabled.output"
				input1 = "@get_event_info.output_unstopped"
				input2 = "@inside_cull_range_and_unstopped.output"
			},
			
			{
				name = "not_first_execution"
				operator = "math_float"
				apply = "sub"
				input1 = "1.0"
				input2 = "@first_execution_check.output"
			},
			
			{
				name = "should_start_and_not_first_time"
				operator = "math_float"
				apply = "min"
				input1 = "@should_start_soundevent_switch.output"
				input2 = "@not_first_execution.output"
			},
			
			{
				name = "play_random"
				operator = "soundevent_start"
				input_start = "@should_start_and_not_first_time.output"
				soundevent_name = "@public.random_soundevent_name"
				input_spawn_oneshots = "1.000000"
				spawn_orphans = "true"
				pass_opvar_args = "true"
				operator_variables = 
				{
					public.position = 
					{
						operator_arg_field = "true"
						data_type = "float3"
						value = "@random_or_passed_position.output"
					}
					public.volume_atten = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.volume_atten"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "citadel"
			display_mod = "citadel"
			display_group = "advanced"
		}
	}
	citadel_ambient_opvar_iterator = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					opvars = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Opvars"
						}
					}
				}
			},
			
			{
				name = "output"
				operator = "util_null"
				execute_once = "1.000000"
				operator_variables = 
				{
					val = 
					{
						data_type = "float"
						value = "0.000000"
					}
					pos = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
					}
				}
			},
			
			{
				name = "zero_out_val"
				operator = "opvar_set_float"
				input = 0.000000
				input_execute = "@check_null_opvar.output"
				input_stack_name = ""
				input_operator_name = "output"
				input_field_name = "val"
				input_use_namespace = "true"
			},
			
			{
				name = "get_opvar_data_length"
				operator = "opvar_get_info"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "@public.opvars"
				input_use_namespace = "false"
			},
			
			{
				name = "get_opvar_name"
				operator = "opvar_get_string"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "@public.opvars"
				input_use_namespace = "false"
				array_selection_type = "index"
				input_index = "@goto_operator.output_goto_count"
			},
			
			{
				name = "check_null_opvar"
				input_execute = "1.000000"
				execute_once = "false"
				operator = "math_string"
				apply = "not_equal"
				input1 = "@get_opvar_name.output"
				input2 = ""
			},
			
			{
				name = "get_opvar_val"
				operator = "opvar_get_float"
				input_execute = "@check_null_opvar.output"
				input_stack_name = "citadel_global_opvars"
				input_operator_name = "opvars"
				input_field_name = "@get_opvar_name.output"
				input_use_namespace = "false"
			},
			
			{
				name = "add_pos_string_to_opvar"
				operator = "math_string"
				input_execute = "@check_null_opvar.output"
				input1 = "@get_opvar_name.output"
				input2 = "_pos"
				apply = "add"
			},
			
			{
				name = "get_opvar_pos"
				operator = "opvar_get_float3"
				input_execute = "@check_null_opvar.output"
				input_stack_name = "citadel_global_opvars"
				input_operator_name = "opvars"
				input_field_name = "@add_pos_string_to_opvar.output_string"
				input_use_namespace = "false"
			},
			
			{
				name = "check_index"
				operator = "math_float"
				input_execute = "@check_null_opvar.output"
				execute_once = "false"
				apply = "equal"
				input1 = "@goto_operator.output_goto_count"
				input2 = 0.000000
			},
			
			{
				name = "calc_opvar_weighted_avg"
				operator = "math_calc_weighted_avg_serial_vec3"
				input_execute = "@check_null_opvar.output"
				input = "@get_opvar_pos.output"
				input_weight = "@get_opvar_val.output"
				input_reset = "@check_index.output"
			},
			
			{
				name = "get_pos_max_weight"
				operator = "math_float"
				input_execute = "@check_null_opvar.output"
				apply = "max"
				input1 = "@get_opvar_val.output"
				input2 = "@output.val"
			},
			
			{
				name = "set_new_max"
				operator = "opvar_set_float"
				input = "@get_pos_max_weight.output"
				input_execute = "@check_null_opvar.output"
				input_stack_name = ""
				input_operator_name = "output"
				input_field_name = "val"
				input_use_namespace = "true"
			},
			
			{
				name = "set_new_pos"
				operator = "opvar_set_float3"
				input_execute = "@check_null_opvar.output"
				input = "@calc_opvar_weighted_avg.output"
				input_stack_name = ""
				input_operator_name = "output"
				input_field_name = "pos"
				input_use_namespace = "true"
			},
			
			{
				name = "goto_operator"
				operator = "sos_goto"
				input_execute = "1"
				input_goto_operator = "citadel_ambient_opvar_iterator::get_opvar_name"
				input_max_loop_count = "@get_opvar_data_length.output_element_count"
			},
		]
	}
	citadel_ambient_multi_opvar_remap = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					global_opvar_names = 
					{
						soundevent_data = "true"
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Opvars"
							property_help = "List of opvars whose values influence the volume/filter values of the sound"
						}
					}
					global_inverse_opvar_names = 
					{
						soundevent_data = "true"
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Opvars"
							property_help = "List of opvars whose values have an inverse influence on the volume/filter values of the sound"
						}
					}
					global_position_opvar_names = 
					{
						soundevent_data = "true"
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Opvars"
							property_help = "List of opvars whose values influence the position of the sound.  As volume goes to zero the position goes towards the position"
						}
					}
					global_inverse_position_opvar_names = 
					{
						soundevent_data = "true"
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Opvars"
							property_help = "List of opvars whose values have an inverse influence on the the position of the sound.  As volume goes to zero the position goes towards the inverse of the position"
						}
					}
					global_inverse_position_non_vol_opvar_names = 
					{
						soundevent_data = "true"
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Opvars"
							property_help = "List of opvars whose values have an inverse influence on the the position of the sound, they will alter the position regardless of the volume"
						}
					}
					global_opvar_filter_velocity = 
					{
						data_type = "float"
						value = 999
						_system_properties = 
						{
							property_group = "Opvars"
							property_help = "Max rate that the opvar value will change (in units/sec)"
						}
					}
					global_opvar_inverse_filter_velocity = 
					{
						data_type = "float"
						value = 999
						_system_properties = 
						{
							property_group = "Opvars"
							property_help = "Max rate that the inverse opvar value will change (in units/sec)"
						}
					}
					opvar_to_vol_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 1.0, 1.0 ]",
							"[ 1.0, 1.0, 1.0, 1.0, 0.0, 1.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Volume"
							property_help = "Remaps the aggregate opvar value to the volume"
						}
					}
					opvar_to_filter_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 1.0, 1.0 ]",
							"[ 1.0, 1.0, 1.0, 1.0, 0.0, 1.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Filter"
							property_help = "Remaps the aggregate opvar value to the lpf value"
						}
					}
					global_opvar_to_volume_multiplier_min = 
					{
						data_type = "float"
						value = 0.000000
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Volume"
							property_help = "Min value for the linear volume remapper"
						}
					}
					global_opvar_to_volume_multiplier_max = 
					{
						data_type = "float"
						value = 1.000000
						_system_properties = 
						{
							display_group = "normal"
							property_group = "Volume"
							property_help = "Max value for the linear volume remapper"
						}
					}
					opvar_inverse_to_vol_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 1.0, 1.0 ]",
							"[ 1.0, 1.0, 1.0, 1.0, 0.0, 1.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Volume"
							property_help = "Remaps the aggregate inverse opvar value to the volume"
						}
					}
					opvar_inverse_to_filter_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.0, 0.0, 1.0, 1.0 ]",
							"[ 1.0, 1.0, 1.0, 1.0, 0.0, 1.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Filter"
							property_help = "Remaps the aggregate inverse opvar value to the filter value"
						}
					}
					volume_lfo_freq = 
					{
						data_type = "float"
						value = 1.000000
						property_group = "LFO"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "LFO"
							property_help = "Frequency control for the volume LFO"
						}
					}
					volume_lfo_scale = 
					{
						data_type = "float"
						value = 0.000000
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "LFO"
							property_help = "Amplitude control for the volume LFO"
						}
					}
					volume_atten = 
					{
						data_type = "float"
						value = 1.000000
						_system_properties = 
						{
							display_group = "locked"
							property_group = "Volume"
							property_help = "Volume scalar, usually set from code or another stack"
						}
					}
					volume_base = 
					{
						data_type = "float"
						value = 1.000000
						_system_properties = 
						{
							display_group = "locked"
							property_group = "Volume"
							property_help = "Volume scalar, no idea where it's set from"
						}
					}
				}
			},
			
			{
				name = "comments"
				operator = "util_null"
				operator_variables = 
				{
					docstring_01 = 
					{
						data_type = "string"
						value = "Used to enable opvar remapping for an array (of unknown size) of opvars"
					}
					docstring_02 = 
					{
						data_type = "string"
						value = "TODO: Use (futuretech) compound types to associate freq/vol curves with each opvar name, and remap the value through those curves"
					}
				}
			},
			
			{
				name = "globals"
				operator = "get_system_globals"
				input_execute = "1"
				input_listener_index = "0"
			},
			
			{
				name = "volume_opvar_values"
				operator = "util_null"
				execute_once = "1.000000"
				operator_variables = 
				{
					max_vol_val = 
					{
						data_type = "float"
						value = "0.000000"
					}
					min_vol_inverse_val = 
					{
						data_type = "float"
						value = "1.00"
					}
				}
			},
			
			{
				name = "reset_max_vol_val"
				input = "0.0"
				input_execute = "1.0"
				operator = "opvar_set_float"
				input_stack_name = ""
				input_operator_name = "volume_opvar_values"
				input_field_name = "max_vol_val"
				input_use_namespace = "true"
			},
			
			{
				name = "reset_min_vol_inverse_val"
				input = "1.0"
				input_execute = "1.0"
				operator = "opvar_set_float"
				input_stack_name = ""
				input_operator_name = "volume_opvar_values"
				input_field_name = "min_vol_inverse_val"
				input_use_namespace = "true"
			},
			
			{
				name = "get_opvar_data_length"
				operator = "opvar_get_info"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "global_opvar_names"
				input_use_namespace = "false"
			},
			
			{
				name = "get_opvar_name"
				operator = "opvar_get_string"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "global_opvar_names"
				input_use_namespace = "false"
				array_selection_type = "index"
				input_index = "@goto_operator.output_goto_count"
			},
			
			{
				name = "check_null_opvar"
				input_execute = "1.000000"
				execute_once = "false"
				operator = "math_string"
				apply = "not_equal"
				input1 = "@get_opvar_name.output"
				input2 = ""
			},
			
			{
				name = "get_global_opvar"
				operator = "opvar_get_float"
				input_execute = "@check_null_opvar.output"
				input_stack_name = "citadel_global_opvars"
				input_operator_name = "opvars"
				input_field_name = "@get_opvar_name.output"
				input_use_namespace = "false"
			},
			
			{
				name = "get_max_value"
				input_execute = "@check_null_opvar.output"
				operator = "math_float"
				apply = "max"
				input1 = "@get_global_opvar.output"
				input2 = "@volume_opvar_values.max_vol_val"
			},
			
			{
				name = "set_new_max"
				input = "@get_max_value.output"
				input_execute = "@check_null_opvar.output"
				operator = "opvar_set_float"
				input_stack_name = ""
				input_operator_name = "volume_opvar_values"
				input_field_name = "max_vol_val"
				input_use_namespace = "true"
			},
			
			{
				name = "goto_operator"
				operator = "sos_goto"
				input_execute = "1"
				input_goto_operator = "citadel_ambient_multi_opvar_remap::get_opvar_name"
				input_max_loop_count = "@get_opvar_data_length.output_element_count"
			},
			
			{
				name = "global_opvar_filter"
				operator = "math_filter_float"
				input = "@volume_opvar_values.max_vol_val"
				input_max_velocity = "@public.global_opvar_filter_velocity"
			},
			
			{
				name = "remap_opvar_value"
				operator = "math_curve_2d"
				input = "@global_opvar_filter.output"
				public_field_name = "public.opvar_to_vol_curve"
				input_scale_x = 1.000000
				input_scale_y = 1.000000
			},
			
			{
				name = "remap_opvar_value_to_filter_freq"
				operator = "math_curve_2d"
				input = "@global_opvar_filter.output"
				public_field_name = "public.opvar_to_filter_curve"
				input_scale_x = 1.000000
				input_scale_y = 1.000000
			},
			
			{
				name = "map_global_opvar_to_volume"
				input_execute = "1.000000"
				operator = "math_remap_float"
				input = "@remap_opvar_value.output"
				input_min = "0.000000"
				input_max = "1.000000"
				input_map_min = "@public.global_opvar_to_volume_multiplier_min"
				input_map_max = "@public.global_opvar_to_volume_multiplier_max"
				default_to_max = "true"
			},
			
			{
				name = "get_opvar_inverse_data_length"
				operator = "opvar_get_info"
				execute_once = "true"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "global_inverse_opvar_names"
				input_use_namespace = "false"
			},
			
			{
				name = "get_opvar_inverse_name"
				operator = "opvar_get_string"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "global_inverse_opvar_names"
				input_use_namespace = "false"
				array_selection_type = "index"
				input_index = "@goto_operator_inverse.output_goto_count"
			},
			
			{
				name = "check_null_inverse_opvar"
				input_execute = "1.000000"
				execute_once = "false"
				operator = "math_string"
				apply = "not_equal"
				input1 = "@get_opvar_inverse_name.output"
				input2 = ""
			},
			
			{
				name = "get_global_inverse_opvar"
				operator = "opvar_get_float"
				input_execute = "@check_null_inverse_opvar.output"
				input_stack_name = "citadel_global_opvars"
				input_operator_name = "opvars"
				input_field_name = "@get_opvar_inverse_name.output"
				input_use_namespace = "false"
			},
			
			{
				name = "invert_opvar_val"
				input_execute = "@check_null_inverse_opvar.output"
				operator = "math_float"
				apply = "sub"
				input1 = "1.0"
				input2 = "@get_global_inverse_opvar.output"
			},
			
			{
				name = "min_inverse_val"
				input_execute = "@check_null_inverse_opvar.output"
				operator = "math_float"
				apply = "min"
				input1 = "@invert_opvar_val.output"
				input2 = "@volume_opvar_values.min_vol_inverse_val"
			},
			
			{
				name = "set_new_val"
				input_execute = "@check_null_inverse_opvar.output"
				input = "@min_inverse_val.output"
				operator = "opvar_set_float"
				input_stack_name = ""
				input_operator_name = "volume_opvar_values"
				input_field_name = "min_vol_inverse_val"
				input_use_namespace = "true"
			},
			
			{
				name = "goto_operator_inverse"
				operator = "sos_goto"
				input_execute = "1"
				input_goto_operator = "citadel_ambient_multi_opvar_remap::get_opvar_inverse_name"
				input_max_loop_count = "@get_opvar_inverse_data_length.output_element_count"
			},
			
			{
				name = "reinvert_opvar_val_so_curve_looks_nice"
				input_execute = "@check_null_inverse_opvar.output"
				operator = "math_float"
				apply = "sub"
				input1 = "1.0"
				input2 = "@volume_opvar_values.min_vol_inverse_val"
			},
			
			{
				name = "global_opvar_inverse_filter"
				operator = "math_filter_float"
				input = "@reinvert_opvar_val_so_curve_looks_nice.output"
				input_max_velocity = "@public.global_opvar_inverse_filter_velocity"
			},
			
			{
				name = "map_global_opvar_inverse_to_volume"
				operator = "math_curve_2d"
				input = "@global_opvar_inverse_filter.output"
				public_field_name = "public.opvar_inverse_to_vol_curve"
				input_scale_x = 1.000000
				input_scale_y = 1.000000
			},
			
			{
				name = "remap_opvar_inverse_value_to_filter_freq"
				operator = "math_curve_2d"
				input = "@global_opvar_inverse_filter.output"
				public_field_name = "public.opvar_inverse_to_filter_curve"
				input_scale_x = 1.000000
				input_scale_y = 1.000000
			},
			
			{
				name = "vol_lfo"
				operator = "mod_LFO"
				wave_type = "sin"
				input_frequency = "@public.volume_lfo_freq"
				input_scale = "@public.volume_lfo_scale"
				input_center = "1.000000"
			},
			
			{
				name = "opvar_volume_accumulate"
				operator = "math_accumulate12_float"
				apply = "mult"
				input1 = "@map_global_opvar_to_volume.output"
				input2 = "@map_global_opvar_inverse_to_volume.output"
				input3 = "1"
				input4 = "@public.volume_atten"
				input5 = "@public.volume_base"
				input6 = "@vol_lfo.output"
				input7 = "1.000000"
				input8 = "1.000000"
				input9 = "1.000000"
				input10 = "1.000000"
				input11 = "1.000000"
				input12 = "1.000000"
			},
			
			{
				name = "filter_freq_accumulate"
				operator = "math_accumulate12_float"
				apply = "mult"
				input1 = "@remap_opvar_value_to_filter_freq.output"
				input2 = "@remap_opvar_inverse_value_to_filter_freq.output"
				input3 = "1"
				input4 = "1.000000"
				input5 = "1.000000"
				input6 = "1.000000"
				input7 = "1.000000"
				input8 = "1.000000"
				input9 = "1.000000"
				input10 = "1.000000"
				input11 = "1.000000"
				input12 = "1.000000"
			},
			
			{
				name = "mult_opvars_for_output"
				operator = "math_float"
				apply = "mult"
				input1 = "@global_opvar_filter.output"
				input2 = "@map_global_opvar_inverse_to_volume.output"
			},
			
			{
				name = "output_values"
				operator = "util_null"
				execute_once = "1.000000"
				operator_variables = 
				{
					volume_val = 
					{
						data_type = "float"
						value = "@opvar_volume_accumulate.output"
					}
					filter_val = 
					{
						data_type = "float"
						value = "@filter_freq_accumulate.output"
					}
					opvar_val = 
					{
						data_type = "float"
						value = "@mult_opvars_for_output.output"
					}
					position_weight_max = 
					{
						data_type = "float"
						value = 0.000000
					}
					inverse_position_weight_max = 
					{
						data_type = "float"
						value = 0.000000
					}
					folddown_position = 
					{
						data_type = "float3"
						value = "[ 0.0, 0.0, 0.0 ]"
					}
					folddown_position_non_vol = 
					{
						data_type = "float3"
						value = "[ 0.0, 0.0, 0.0 ]"
					}
					foldown_opvar_val_non_vol = 
					{
						data_type = "float"
						value = 0.000000
					}
				}
			},
			
			{
				name = "set_new_pos_max"
				operator = "opvar_set_float"
				input = 0.000000
				input_execute = "@check_null_opvar.output"
				input_stack_name = ""
				input_operator_name = "output_values"
				input_field_name = "position_weight_max"
				input_use_namespace = "true"
			},
			
			{
				name = "set_new_inverse_pos_max"
				operator = "opvar_set_float"
				input = 0.000000
				input_execute = "@check_null_opvar.output"
				input_stack_name = ""
				input_operator_name = "output_values"
				input_field_name = "inverse_position_weight_max"
				input_use_namespace = "true"
			},
			
			{
				name = "citadel_ambient_opvar_iterator"
				operator = "sos_import_stack"
				import_stack = "citadel_ambient_opvar_iterator"
				operator_variables = 
				{
					opvars = 
					{
						data_type = "string"
						value = "global_position_opvar_names"
					}
				}
			},
			
			{
				name = "citadel_ambient_opvar_iterator_inverse"
				operator = "sos_import_stack"
				import_stack = "citadel_ambient_opvar_iterator"
				operator_variables = 
				{
					opvars = 
					{
						data_type = "string"
						value = "global_inverse_position_opvar_names"
					}
				}
			},
			
			{
				name = "citadel_ambient_opvar_iterator_inverse_non_vol"
				operator = "sos_import_stack"
				import_stack = "citadel_ambient_opvar_iterator"
				operator_variables = 
				{
					opvars = 
					{
						data_type = "string"
						value = "global_inverse_position_non_vol_opvar_names"
					}
				}
			},
			
			{
				name = "calculate_inverse_position"
				operator = "math_calc_directional_vec3"
				input_start_position = "@citadel_ambient_opvar_iterator_inverse::output.pos"
				input_center_position = "@globals.output_listener_position"
			},
			
			{
				name = "calculate_inverse_position_non_vol"
				operator = "math_calc_directional_vec3"
				input_start_position = "@citadel_ambient_opvar_iterator_inverse_non_vol::output.pos"
				input_center_position = "@globals.output_listener_position"
			},
			
			{
				name = "inverse_debug"
				operator = "util_draw_radius"
				input_execute = 0.000000
				input_radius_min = 10.000000
				input_name = "inverse"
				input_position = "@calculate_inverse_position.output"
			},
			
			{
				name = "invert_pos_weight"
				input_execute = "1.000000"
				operator = "math_float"
				apply = "sub"
				input1 = 1.000000
				input2 = "@citadel_ambient_opvar_iterator::output.val"
			},
			
			{
				name = "calc_folddown_position"
				input_execute = "1.000000"
				execute_once = "false"
				operator = "math_calc_weighted_avg_vec3"
				input_1 = "@citadel_ambient_opvar_iterator::output.pos"
				input_2 = "@calculate_inverse_position.output"
				input_weight_1 = "@invert_pos_weight.output"
				input_weight_2 = "@citadel_ambient_opvar_iterator_inverse::output.val"
			},
			
			{
				name = "set_folddown_pos_opvar"
				operator = "opvar_set_float3"
				input_execute = "1.000000"
				input = "@calc_folddown_position.output"
				input_stack_name = ""
				input_operator_name = "output_values"
				input_field_name = "folddown_position"
				input_use_namespace = "true"
			},
			
			{
				name = "set_folddown_pos_opvar_non_vol"
				operator = "opvar_set_float3"
				input_execute = "1.000000"
				input = "@calculate_inverse_position_non_vol.output"
				input_stack_name = ""
				input_operator_name = "output_values"
				input_field_name = "folddown_position_non_vol"
				input_use_namespace = "true"
			},
			
			{
				name = "set_foldown_opvar_val_non_vol"
				operator = "opvar_set_float"
				input_execute = "1.000000"
				input = "@citadel_ambient_opvar_iterator_inverse_non_vol::output.val"
				input_index = "0"
				input_operator_name = "output_values"
				input_field_name = "foldown_opvar_val_non_vol"
				input_use_namespace = "true"
			},
		]
	}
	citadel_simple_voicegraph_filter_dynamics = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import_public_opvars = 
					[
						"citadel_base_3d",
						"citadel_ambient_multi_opvar_remap",
					]
					vsnd_files = 
					{
						data_type = "vsnd"
						soundevent_data = "true"
						value = 
						[
							"sounds/common/null.vsnd",
						]
					}
					filter_mix = 
					{
						data_type = "float"
						value = "1.000000"
					}
					volume_atten = 
					{
						data_type = "float"
						value = "1.000000"
					}
					volume_lfo_freq = 
					{
						data_type = "float"
						value = "1.000000"
					}
					volume_lfo_scale = 
					{
						data_type = "float"
						value = "0.000000"
					}
					pitch_external = 
					{
						data_type = "float"
						value = "1.000000"
					}
					direct_mix_level = 
					{
						data_type = "float"
						value = "1.000000"
					}
					voicegraph_name = 
					{
						data_type = "string"
						value = "citadel.hrtf_w_lpf_dynamics_b"
					}
					use_hrtf = 
					{
						data_type = "float"
						value = "1.000000"
					}
					delay = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_pause_with_game = 
					{
						data_type = "bool"
						value = "true"
					}
					should_save = 
					{
						data_type = "float"
						value = "0.000000"
					}
				}
			},
			
			{
				name = "citadel_ambient_multi_opvar_remap"
				operator = "sos_import_stack"
				import_stack = "citadel_ambient_multi_opvar_remap"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
				}
			},
			
			{
				name = "citadel_base_3d"
				operator = "sos_import_stack"
				import_stack = "citadel_base_3d"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					volume_atten = 
					{
						value = "@citadel_ambient_multi_opvar_remap::opvar_volume_accumulate.output"
					}
				}
			},
			
			{
				name = "pitch_mult"
				input_execute = "1.000000"
				operator = "math_float"
				apply = "mult"
				input1 = "@public.pitch_external"
				input2 = "@citadel_base_3d::pitch_adjustment.output"
			},
			
			{
				name = "get_vsnd"
				execute_once = "true"
				operator = "opvar_get_vsnd"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "vsnd_files"
				input_use_namespace = "false"
				array_selection_type = "random_exclusive"
			},
			
			{
				name = "speakers_select"
				operator = "ctrl_switch_speakers"
				input_switch = "1.000000"
				input1 = "@citadel_base_3d::speakers_spatialize.output"
				left_front2 = "1.000000"
				right_front2 = "1.000000"
				left_rear2 = "1.000000"
				right_rear2 = "1.000000"
				center2 = "1.000000"
				lfe2 = "1.000000"
			},
			
			{
				name = "culling_invert"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				apply = "sub"
				input1 = "1.000000"
				input2 = "@citadel_base_3d::greater_than_cull_distance.output"
			},
			
			{
				name = "not_culling_and_unstopped"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				apply = "min"
				input1 = "@culling_invert.output"
				input2 = "@citadel_base_3d::get_event_info.output_unstopped"
			},
			
			{
				name = "switch_start_mode"
				operator = "ctrl_switch_float"
				input_switch = "@public.cull_at_distance"
				input1 = "@citadel_base_3d::get_event_info.output_unstopped"
				input2 = "@not_culling_and_unstopped.output"
			},
			
			{
				name = "set_builtins"
				operator = "sos_set_builtins"
				input_voicegraph = "@public.voicegraph_name"
			},
			
			{
				name = "start_vmix"
				operator = "vmix_voice_start"
				input_track1 = "track_01"
				input_start2 = "0.000000"
				input_start3 = "0.000000"
				input_start4 = "0.000000"
				input_start5 = "0.000000"
				input_start6 = "0.000000"
				input_start7 = "0.000000"
				input_start8 = "0.000000"
				input_vsnd1 = "@get_vsnd.output"
				execute_once = "false"
				input_execute = "1.000000"
				input_start = "@switch_start_mode.output"
				input_should_pause = "@public.vsnd_pause_with_game"
				input_should_save = "@public.should_save"
				input_speaker_volumes = "@speakers_select.output"
				input_pitch = "@pitch_mult.output"
				input_delay = "@public.delay"
				input_memory_type = "@public.memory_type"
				input_fade_out = "@public.volume_fade_out"
			},
			
			{
				name = "send_voicegraph_hrtf"
				operator = "vmix_voicegraph_input"
				input_name = "hrtf_mix"
				input = "@public.use_hrtf"
			},
			
			{
				name = "send_voicegraph_filter_freq"
				operator = "vmix_voicegraph_input"
				input_name = "filter_freq"
				input = "@citadel_ambient_multi_opvar_remap::filter_freq_accumulate.output"
			},
			
			{
				name = "send_voicegraph_filter_mix"
				operator = "vmix_voicegraph_input"
				input_name = "filter_mix"
				input = "@public.filter_mix"
			},
			
			{
				name = "unpack_pos"
				input_execute = "1.000000"
				operator = "util_elements_float3"
				input = "@citadel_base_3d::add_position_offset.output"
			},
			
			{
				name = "send_voicegraph_pos_x"
				operator = "vmix_voicegraph_input"
				input_name = "pos_x"
				input = "@unpack_pos.output_0"
			},
			
			{
				name = "send_voicegraph_pos_y"
				operator = "vmix_voicegraph_input"
				input_name = "pos_y"
				input = "@unpack_pos.output_1"
			},
			
			{
				name = "send_voicegraph_pos_z"
				operator = "vmix_voicegraph_input"
				input_name = "pos_z"
				input = "@unpack_pos.output_2"
			},
			
			{
				name = "send_voicegraph_direct_mix_level"
				operator = "vmix_voicegraph_input"
				input_name = "Direct Mix Level"
				input = "@public.direct_mix_level"
			},
		]
		_system_properties = 
		{
			display_game = "citadel"
		}
	}
	citadel_ambient_fixed_rotation_multi_vsnd = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import_public_opvars = 
					[
						"citadel_base_3d",
						"citadel_ambient_multi_opvar_remap",
					]
					vsnd_file_01 = 
					{
						data_type = "vsnd"
						value = ""
					}
					vsnd_vol_01 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_file_02 = 
					{
						data_type = "vsnd"
						value = ""
					}
					vsnd_vol_02 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_file_03 = 
					{
						data_type = "vsnd"
						value = ""
					}
					vsnd_vol_03 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_file_04 = 
					{
						data_type = "vsnd"
						value = ""
					}
					vsnd_vol_04 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_file_05 = 
					{
						data_type = "vsnd"
						value = ""
					}
					vsnd_vol_05 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_file_06 = 
					{
						data_type = "vsnd"
						value = ""
					}
					vsnd_vol_06 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_file_07 = 
					{
						data_type = "vsnd"
						value = ""
					}
					vsnd_vol_07 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_file_08 = 
					{
						data_type = "vsnd"
						value = ""
					}
					vsnd_vol_08 = 
					{
						data_type = "float"
						value = "0.000000"
					}
					radius = 
					{
						data_type = "float"
						value = "100.000000"
					}
					rotation_angle = 
					{
						data_type = "float"
						value = "0"
					}
					vertical_rotation_angle = 
					{
						data_type = "float"
						value = "0"
					}
					filter_mix = 
					{
						data_type = "float"
						value = "0.000000"
					}
					compressor_gain = 
					{
						data_type = "float"
						value = "0.000000"
					}
					compressor_enable = 
					{
						data_type = "float"
						value = "0.000000"
					}
					send_name = 
					{
						value = "world"
					}
					mixer_mixgroup = 
					{
						value = "World"
					}
					vsnd_pause_with_game = 
					{
						data_type = "bool"
						value = "true"
					}
					voicegraph_name = 
					{
						data_type = "string"
						value = "citadel.hrtf_8layer_ambience"
					}
				}
			},
			
			{
				name = "globals"
				operator = "get_system_globals"
				input_execute = "1"
				input_listener_index = "0"
			},
			
			{
				name = "calc_rotation_angle_position"
				operator = "math_calc_fixed_rotation"
				input_center_position = "@globals.output_listener_position"
				input_radius = "@public.radius"
				input_rotation_angle = "@public.rotation_angle"
				input_elevation_angle = "@public.vertical_rotation_angle"
			},
			
			{
				name = "citadel_ambient_multi_opvar_remap"
				operator = "sos_import_stack"
				import_stack = "citadel_ambient_multi_opvar_remap"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
				}
			},
			
			{
				name = "citadel_base_3d"
				operator = "sos_import_stack"
				import_stack = "citadel_base_3d"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					position = 
					{
						value = "@calc_rotation_angle_position.output"
					}
					occlusion_scale = 
					{
						value = "@public.occlusion_scale"
					}
					volume_atten = 
					{
						value = "@citadel_ambient_multi_opvar_remap::opvar_volume_accumulate.output"
					}
				}
			},
			
			{
				name = "should_start_1"
				input_execute = "1.000000"
				execute_once = "true"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.vsnd_vol_01"
				input2 = "0.000000"
			},
			
			{
				name = "should_start_2"
				input_execute = "1.000000"
				execute_once = "true"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.vsnd_vol_02"
				input2 = "0.000000"
			},
			
			{
				name = "should_start_3"
				input_execute = "1.000000"
				execute_once = "true"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.vsnd_vol_03"
				input2 = "0.000000"
			},
			
			{
				name = "should_start_4"
				input_execute = "1.000000"
				execute_once = "true"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.vsnd_vol_04"
				input2 = "0.000000"
			},
			
			{
				name = "should_start_5"
				input_execute = "1.000000"
				execute_once = "true"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.vsnd_vol_05"
				input2 = "0.000000"
			},
			
			{
				name = "should_start_6"
				input_execute = "1.000000"
				execute_once = "true"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.vsnd_vol_06"
				input2 = "0.000000"
			},
			
			{
				name = "should_start_7"
				input_execute = "1.000000"
				execute_once = "true"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.vsnd_vol_07"
				input2 = "0.000000"
			},
			
			{
				name = "should_start_8"
				input_execute = "1.000000"
				execute_once = "true"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.vsnd_vol_08"
				input2 = "0.000000"
			},
			
			{
				name = "set_builtins"
				operator = "sos_set_builtins"
				input_voicegraph = "@public.voicegraph_name"
			},
			
			{
				name = "start_vmix"
				operator = "vmix_voice_start"
				input_execute = "1.000000"
				input_track1 = "track_01"
				input_track2 = "track_02"
				input_track3 = "track_03"
				input_track4 = "track_04"
				input_track5 = "track_05"
				input_track6 = "track_06"
				input_track7 = "track_07"
				input_track8 = "track_08"
				input_start1 = "@should_start_1.output"
				input_start2 = "@should_start_2.output"
				input_start3 = "@should_start_3.output"
				input_start4 = "@should_start_4.output"
				input_start5 = "@should_start_5.output"
				input_start6 = "@should_start_6.output"
				input_start7 = "@should_start_7.output"
				input_start8 = "@should_start_8.output"
				input_vsnd1 = "@public.vsnd_file_01"
				input_vsnd2 = "@public.vsnd_file_02"
				input_vsnd3 = "@public.vsnd_file_03"
				input_vsnd4 = "@public.vsnd_file_04"
				input_vsnd5 = "@public.vsnd_file_05"
				input_vsnd6 = "@public.vsnd_file_06"
				input_vsnd7 = "@public.vsnd_file_07"
				input_vsnd8 = "@public.vsnd_file_08"
				execute_once = "false"
				input_should_pause = "@public.vsnd_pause_with_game"
				input_start = "@citadel_base_3d::get_event_info.output_unstopped"
				input_speaker_volumes = "@citadel_base_3d::speakers_spatialize.output"
				input_pitch = "@public.pitch"
				input_fade_out = "@public.volume_fade_out"
				input_delay = "@public.delay"
				input_memory_type = "@public.memory_type"
			},
			
			{
				name = "send_voicegraph_hrtf_mix_level"
				input_execute = "@citadel_base_3d::get_event_info.output_unstopped"
				operator = "vmix_voicegraph_input"
				input_name = "hrtf_mix"
				input = "@citadel_base_3d::speakers_spatialize.output_hrtf_mix"
			},
			
			{
				name = "send_volume_1"
				input_execute = "@public.vsnd_vol_01"
				operator = "vmix_voicegraph_input"
				input_name = "volume_1"
				input = "@public.vsnd_vol_01"
			},
			
			{
				name = "send_volume_2"
				input_execute = "@public.vsnd_vol_02"
				operator = "vmix_voicegraph_input"
				input_name = "volume_2"
				input = "@public.vsnd_vol_02"
			},
			
			{
				name = "send_volume_3"
				input_execute = "@public.vsnd_vol_03"
				operator = "vmix_voicegraph_input"
				input_name = "volume_3"
				input = "@public.vsnd_vol_03"
			},
			
			{
				name = "send_volume_4"
				input_execute = "@public.vsnd_vol_04"
				operator = "vmix_voicegraph_input"
				input_name = "volume_4"
				input = "@public.vsnd_vol_04"
			},
			
			{
				name = "send_volume_5"
				input_execute = "@public.vsnd_vol_05"
				operator = "vmix_voicegraph_input"
				input_name = "volume_5"
				input = "@public.vsnd_vol_05"
			},
			
			{
				name = "send_volume_6"
				input_execute = "@public.vsnd_vol_06"
				operator = "vmix_voicegraph_input"
				input_name = "volume_6"
				input = "@public.vsnd_vol_06"
			},
			
			{
				name = "send_volume_7"
				input_execute = "@public.vsnd_vol_07"
				operator = "vmix_voicegraph_input"
				input_name = "volume_7"
				input = "@public.vsnd_vol_07"
			},
			
			{
				name = "send_volume_8"
				input_execute = "@public.vsnd_vol_08"
				operator = "vmix_voicegraph_input"
				input_name = "volume_8"
				input = "@public.vsnd_vol_08"
			},
			
			{
				name = "send_filter_freq"
				input_execute = "@public.filter_mix"
				operator = "vmix_voicegraph_input"
				input_name = "filter_freq"
				input = "@citadel_ambient_multi_opvar_remap::filter_freq_accumulate.output"
			},
			
			{
				name = "send_filter_mix"
				input_execute = "@public.filter_mix"
				operator = "vmix_voicegraph_input"
				input_name = "filter_mix"
				input = "@public.filter_mix"
			},
			
			{
				name = "send_compressor_enable"
				input_execute = "@public.compressor_enable"
				operator = "vmix_voicegraph_input"
				input_name = "compressor_enable"
				input = "@public.compressor_enable"
			},
			
			{
				name = "send_compressor_gain"
				input_execute = "1.000000"
				operator = "vmix_voicegraph_input"
				input_name = "compressor_gain"
				input = "@public.compressor_gain"
			},
		]
		_system_properties = 
		{
			display_game = "citadel"
			display_mod = "citadel"
			display_group = "advanced"
		}
	}
	citadel_start_multi_quad = 
	{
		operators = 
		[
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					soundevent_01 = 
					{
						data_type = "string"
						value = ""
					}
					soundevent_02 = 
					{
						data_type = "string"
						value = ""
					}
					soundevent_03 = 
					{
						data_type = "string"
						value = ""
					}
					soundevent_04 = 
					{
						data_type = "string"
						value = ""
					}
					volume_atten = 
					{
						data_type = "float"
						value = "1.000000"
					}
					pitch_adjust = 
					{
						data_type = "float"
						value = "1.000000"
					}
					attachment = 
					{
						data_type = "string_token"
						value = ""
						_system_properties = 
						{
							display_group = "locked"
						}
					}
					position = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
						_system_properties = 
						{
							display_group = "locked"
							display_edit_type = "field_position_editor"
						}
					}
					stop_at_time = 
					{
						data_type = "float"
						value = "-1.000000"
					}
					rand_delay_min = 
					{
						data_type = "float"
						value = "0.000000"
					}
					rand_delay_max = 
					{
						data_type = "float"
						value = "0.000000"
					}
					radius = 
					{
						data_type = "float"
						value = "100.000000"
					}
					set_radius = 
					{
						data_type = "float"
						value = "0.000000"
					}
					volume_opvar_01_filter_velocity = 
					{
						data_type = "float"
						value = "0.600000"
					}
					global_volume_opvar_01 = 
					{
						data_type = "string"
						value = ""
					}
					remap_global_opvar_01_to_vol_min = 
					{
						data_type = "float"
						value = "1.000000"
					}
					remap_global_opvar_01_to_vol_max = 
					{
						data_type = "float"
						value = "1.000000"
					}
					voice_layer = 
					{
						data_type = "enum"
						enum_field = "vmix_voice_start.voice_layer"
						value = "none"
					}
				}
			},
			
			{
				name = "stop_at_time"
				operator = "soundevent_control"
				input_stop_at_time = "@public.stop_at_time"
				voice_layer = "@public.voice_layer"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "random_delay"
				operator = "math_random_float"
				input_execute = "1.000000"
				execute_once = "true"
				input_min = "@public.rand_delay_min"
				input_max = "@public.rand_delay_max"
				round_to_int = "0"
			},
			
			{
				name = "check_null_volume_opvar"
				input_execute = "1.000000"
				operator = "math_string"
				apply = "not_equal"
				input1 = "@public.global_volume_opvar_01"
				input2 = ""
			},
			
			{
				name = "get_volume_opvar_01"
				operator = "opvar_get_float"
				input_execute = "@check_null_volume_opvar.output"
				input_stack_name = "citadel_global_opvars"
				input_operator_name = "opvars"
				input_field_name = "@public.global_volume_opvar_01"
				input_use_namespace = "false"
			},
			
			{
				name = "volume_opvar_01_filter"
				operator = "math_filter_float"
				input = "@get_volume_opvar_01.output"
				input_max_velocity = "@public.volume_opvar_01_filter_velocity"
			},
			
			{
				name = "map_global_opvar_to_volume_01"
				input_execute = "1.000000"
				operator = "math_remap_float"
				input = "@volume_opvar_01_filter.output"
				input_min = "0.000000"
				input_max = "1.000000"
				input_map_min = "@public.remap_global_opvar_01_to_vol_min"
				input_map_max = "@public.remap_global_opvar_01_to_vol_max"
				default_to_max = "false"
			},
			
			{
				name = "mult_volume_opvar_by_volume_atten"
				input_execute = "1.000000"
				operator = "math_float"
				apply = "mult"
				input1 = "@map_global_opvar_to_volume_01.output"
				input2 = "@public.volume_atten"
			},
			
			{
				name = "soundevent_01"
				operator = "soundevent_start"
				execute_once = "false"
				input_spawn_oneshots = "0.000000"
				input_execute = "1.000000"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "@public.soundevent_01"
				pass_opvar_args = "true"
				input_update_opvar_args = "true"
				operator_variables = 
				{
					public.volume_atten = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@mult_volume_opvar_by_volume_atten.output"
					}
					public.attachment = 
					{
						operator_arg_field = "true"
						data_type = "string_token"
						value = "@public.attachment"
					}
					public.position = 
					{
						operator_arg_field = "true"
						data_type = "float3"
						value = "@public.position"
					}
					public.pitch_adjust = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.pitch_adjust"
					}
					public.voice_layer = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.voice_layer"
					}
				}
			},
			
			{
				name = "soundevent_01_set_radius"
				operator = "soundevent_param"
				input_guid = "@soundevent_01.output_current_guid"
				input_execute = "@public.set_radius"
				operator_variables = 
				{
					public.radius = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.radius"
					}
				}
			},
			
			{
				name = "soundevent_02"
				operator = "soundevent_start"
				execute_once = "false"
				input_spawn_oneshots = "0.000000"
				input_execute = "1.000000"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "@public.soundevent_02"
				pass_opvar_args = "true"
				input_update_opvar_args = "true"
				operator_variables = 
				{
					public.volume_atten = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@mult_volume_opvar_by_volume_atten.output"
					}
					public.attachment = 
					{
						operator_arg_field = "true"
						data_type = "string_token"
						value = "@public.attachment"
					}
					public.position = 
					{
						operator_arg_field = "true"
						data_type = "float3"
						value = "@public.position"
					}
					public.pitch_adjust = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.pitch_adjust"
					}
					public.voice_layer = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.voice_layer"
					}
				}
			},
			
			{
				name = "soundevent_02_set_radius"
				operator = "soundevent_param"
				input_guid = "@soundevent_02.output_current_guid"
				input_execute = "@public.set_radius"
				operator_variables = 
				{
					public.radius = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.radius"
					}
				}
			},
			
			{
				name = "soundevent_03"
				operator = "soundevent_start"
				execute_once = "false"
				input_spawn_oneshots = "0.000000"
				input_execute = "1.000000"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "@public.soundevent_03"
				pass_opvar_args = "true"
				input_update_opvar_args = "true"
				operator_variables = 
				{
					public.volume_atten = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@mult_volume_opvar_by_volume_atten.output"
					}
					public.attachment = 
					{
						operator_arg_field = "true"
						data_type = "string_token"
						value = "@public.attachment"
					}
					public.position = 
					{
						operator_arg_field = "true"
						data_type = "float3"
						value = "@public.position"
					}
					public.pitch_adjust = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.pitch_adjust"
					}
					public.voice_layer = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.voice_layer"
					}
				}
			},
			
			{
				name = "soundevent_03_set_radius"
				operator = "soundevent_param"
				input_guid = "@soundevent_03.output_current_guid"
				input_execute = "@public.set_radius"
				operator_variables = 
				{
					public.radius = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.radius"
					}
				}
			},
			
			{
				name = "soundevent_04"
				operator = "soundevent_start"
				execute_once = "false"
				input_spawn_oneshots = "0.000000"
				input_execute = "1.000000"
				input_start = "@get_event_info.output_unstopped"
				soundevent_name = "@public.soundevent_04"
				pass_opvar_args = "true"
				input_update_opvar_args = "true"
				operator_variables = 
				{
					public.volume_atten = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@mult_volume_opvar_by_volume_atten.output"
					}
					public.attachment = 
					{
						operator_arg_field = "true"
						data_type = "string_token"
						value = "@public.attachment"
					}
					public.position = 
					{
						operator_arg_field = "true"
						data_type = "float3"
						value = "@public.position"
					}
					public.pitch_adjust = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.pitch_adjust"
					}
					public.voice_layer = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.voice_layer"
					}
				}
			},
			
			{
				name = "soundevent_04_set_radius"
				operator = "soundevent_param"
				input_guid = "@soundevent_04.output_current_guid"
				input_execute = "@public.set_radius"
				operator_variables = 
				{
					public.radius = 
					{
						operator_arg_field = "true"
						data_type = "float"
						value = "@public.radius"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "citadel"
			display_group = "advanced"
		}
	}
	citadel_ambient_3d = 
	{
		operators = 
		[
			
			{
				name = "_builtins"
				operator = "sos_builtins"
				_voicegraph = "citadel.hrtf_basic"
			},
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import_public_opvars = 
					[
						"citadel_soundevent_block",
					]
					position = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
						_system_properties = 
						{
							display_group = "locked"
							display_edit_type = "field_position_editor"
						}
					}
					position_offset = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					position_force_static = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					position_force_from_player = 
					{
						data_type = "bool"
						value = "false"
					}
					position_force_from_input = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					hold_position_on_deleted_entity = 
					{
						data_type = "bool"
						value = "true"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					mixer_mixgroup = 
					{
						data_type = "string"
						value = "All"
						_system_properties = 
						{
							property_group = "Mixer"
						}
					}
					mixer_set_mixlayer = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Mixer"
						}
					}
					mixer_mixlayer_to_set = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							property_group = "Mixer"
						}
					}
					mixer_mixlayer_amount_manual = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							property_group = "Mixer"
						}
					}
					volume = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_edit_type = "field_linear_atten_editor"
						}
					}
					volume_rand_min = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume_rand_max = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume_mult = 
					{
						data_type = "float"
						value = "1.000000"
					}
					volume_fade_in = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume_fade_out = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume_atten = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "locked"
						}
					}
					volume_atten_override = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume_filter_amount = 
					{
						data_type = "float"
						value = "999.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					pitch = 
					{
						data_type = "float"
						value = "1.000000"
					}
					pitch_force_input_to_value = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					pitch_adjust = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "locked"
						}
					}
					pitch_rand_min = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					pitch_rand_max = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					pitch_modulation_max = 
					{
						data_type = "float"
						value = "1.000000"
					}
					pitch_modulation_attack = 
					{
						data_type = "float"
						value = "0.000000"
					}
					pitch_modulation_release = 
					{
						data_type = "float"
						value = "0.000000"
					}
					pitch_modulation_namespace = 
					{
						data_type = "string"
						value = ""
					}
					delay = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					delay_rand_min = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					delay_rand_max = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					delay_use_distance_curve = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					block_distance_max = 
					{
						data_type = "float"
						value = "-1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					spread_min = 
					{
						data_type = "float"
						value = "250"
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_2d2knot_editor"
							x1_field = "public.spread_min"
							x2_field = "public.spread_max"
							y1_field = "public.spread_max_value"
							y2_field = "public.spread_min_value"
							curve_type = "linear"
							operator_name = "speakers_spatialize"
						}
					}
					spread_max = 
					{
						data_type = "float"
						value = "500"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					spread_min_value = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					spread_max_value = 
					{
						data_type = "float"
						value = "0.10000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					occlusion_scale = 
					{
						data_type = "float"
						value = ".9"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					occlusion_radius = 
					{
						data_type = "float"
						value = "60.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					occlusion_min = 
					{
						data_type = "float"
						value = "0.300000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					occlusion_max = 
					{
						data_type = "float"
						value = "1.00000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					occlusion_volume_blend_distance_min = 
					{
						data_type = "float"
						value = "1200.00000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					occlusion_volume_blend_distance_max = 
					{
						data_type = "float"
						value = "2500.00000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					occlusion_max_velocity = 
					{
						data_type = "float"
						value = "1.000000"
					}
					occlusion_interval = 
					{
						data_type = "float"
						value = "0.100000"
					}
					limiter_on = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					limiter_event_name = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					limiter_max = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					limiter_match_type = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					limiter_match_entity = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					limiter_match_event = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					limiter_match_substring = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					limiter_stop_oldest = 
					{
						data_type = "bool"
						value = "true"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					limiter_match_event_duration = 
					{
						data_type = "float"
						value = "-1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					event_type = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					event_stop_at_time = 
					{
						data_type = "float"
						value = "-1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					event_voice_layer = 
					{
						data_type = "enum"
						enum_field = "vmix_voice_start.voice_layer"
						value = "none"
					}
					event_use_music_convar = 
					{
						data_type = "bool"
						value = "false"
					}
					memory_type = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					volume_fade_over_time_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 1.0, 1.0, 0.227125, 0.227125, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
						}
					}
					use_volume_fade_out_curve = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							property_group = "Curves"
						}
					}
					volume_fade_out_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1, -0.00855, -0.00856 2.0, 3.0 ]",
							"[ 1.0, 0.0, 0.227125, 0.227125, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							property_group = "Curves"
							display_edit_type = "field_curve_2d_editor"
							display_edit_flag = "public.use_volume_fade_out_curve"
						}
					}
					volume_distance_falloff_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.0, 1.0, 0.000014, 0.000014, 2.0, 3.0, ]",
							"[ 600.0, 0.0, 0.000024, 0.000024, 2.0, 3.0, ]",
						]
						_system_properties = 
						{
							property_group = "Curves"
							display_edit_type = "field_curve_2d_editor"
						}
					}
					attachment = 
					{
						data_type = "string_token"
						value = ""
						_system_properties = 
						{
							display_group = "locked"
						}
					}
					distance_max_velocity = 
					{
						data_type = "float"
						value = "20000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					debug_radius_inner = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					debug_radius_outer = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					debug_string = 
					{
						data_type = "string"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					block_rand = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					doppler_factor = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					doppler_factor_receding = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					doppler_on = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					facing_vol_attenuation_on = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					send_name = 
					{
						data_type = "string"
						value = "main"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					ambient_ducking_pct = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					reverb_use_curve = 
					{
						data_type = "float"
						value = "1"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					reverb_xfade_value = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					reverb_falloff_curve = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 1.0, 1.0, 0.227125, 0.227125, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
						}
					}
					reverb_curve_max_distance = 
					{
						data_type = "float"
						value = "2500.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					reverb_curve_scale_y = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					cull_at_distance = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					cull_think_time_min = 
					{
						data_type = "float"
						value = "0.050000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					cull_think_time_max = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					block_stop_radius_around_player = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
						}
					}
					hrtf_on = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Hrtf"
						}
					}
					hrtf_mix = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Hrtf"
						}
					}
					effect_owning_graph = 
					{
						data_type = "string"
						value = "main"
						_system_properties = 
						{
							property_group = "Effects"
						}
					}
					use_pathing_render = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Pathing"
						}
					}
					use_pathing_distance = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Pathing"
						}
					}
					use_pathing_render_eq = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Pathing"
						}
					}
					pathing_render_mix = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Pathing"
						}
					}
					effect_input_name = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							property_group = "Effects"
						}
					}
					effect_to_apply = 
					{
						data_type = "string"
						value = ""
						_system_properties = 
						{
							property_group = "Effects"
						}
					}
					use_uiposition = 
					{
						data_type = "bool"
						value = "false"
					}
					uiposition = 
					{
						data_type = "float3"
						value = "[0.0, 0.0, 0.0]"
						_system_properties = 
						{
							display_edit_type = "field_position_editor"
							property_group = "Position"
						}
					}
					recency_bias = 
					{
						data_type = "float"
						value = "-1.0"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Recency Bias"
						}
					}
					recency_bias_max_scale = 
					{
						data_type = "float"
						value = "0.5"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Recency Bias"
						}
					}
					recency_bias_min_scale = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "advanced"
							property_group = "Recency Bias"
						}
					}
					metadata = 
					{
						data_type = "string"
						soundevent_data = "true"
						value = 
						[
							"",
						]
					}
					vsnd_files = 
					{
						data_type = "vsnd"
						soundevent_data = "true"
						value = 
						[
							"sounds/common/null.vsnd",
						]
					}
					vsnd_files_field_name = 
					{
						data_type = "string"
						value = "vsnd_files"
					}
					vsnd_selection_type = 
					{
						data_type = "enum"
						enum_field = "opvar_get_vsnd.array_selection_type"
						value = "random_exclusive"
					}
					vsnd_selection_index = 
					{
						data_type = "float"
						value = "0.000000"
					}
					pitch_external = 
					{
						data_type = "float"
						value = "1.000000"
					}
					pitch_filter_rate = 
					{
						data_type = "float"
						value = "99999.000000"
					}
					sa_source_offset = 
					{
						data_type = "float"
						value = "0.000000"
					}
					vsnd_pause_with_game = 
					{
						data_type = "bool"
						value = "true"
					}
					vsnd_play_loop_release = 
					{
						data_type = "bool"
						value = "false"
					}
					effect_amount = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Effects"
						}
					}
					should_apply_effect_amount = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							property_group = "Effects"
						}
					}
					apply_radio_effect_for_voice = 
					{
						data_type = "bool"
						value = "false"
						_system_properties = 
						{
							property_group = "Effects"
						}
					}
					voice_radio_effect_distance_threshold = 
					{
						data_type = "float"
						value = "500.0"
						_system_properties = 
						{
							property_group = "Effects"
						}
					}
					distance_hpf_on = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Distance"
						}
					}
					distance_lpf_on = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Distance"
						}
					}
					mono_downmix_enabled = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Mono"
						}
					}
					mono_downmix_min_distance = 
					{
						data_type = "float"
						value = "250.0"
						_system_properties = 
						{
							property_group = "Mono"
						}
					}
					mono_downmix_max_distance = 
					{
						data_type = "float"
						value = "950.0"
						_system_properties = 
						{
							property_group = "Mono"
						}
					}
				}
			},
			
			{
				name = "source_info"
				operator = "game_get_source_info"
				source = "entity"
			},
			
			{
				name = "globals"
				operator = "get_system_globals"
				input_execute = "1"
				input_listener_index = "0"
			},
			
			{
				name = "set_layer"
				operator = "soundevent_control"
				voice_layer = "@public.event_voice_layer"
			},
			
			{
				name = "global_pathing_enabled"
				operator = "convar_get"
				convar = "snd_steamaudio_enable_pathing"
			},
			
			{
				name = "use_pathing_render_updated"
				operator = "math_float"
				apply = "and"
				input1 = "@global_pathing_enabled.output"
				input2 = "@public.use_pathing_render"
			},
			
			{
				name = "use_pathing_distance_updated"
				operator = "math_float"
				apply = "and"
				input1 = "@global_pathing_enabled.output"
				input2 = "@public.use_pathing_distance"
			},
			
			{
				name = "use_pathing_updated"
				operator = "math_float"
				apply = "or"
				input1 = "@use_pathing_render_updated.output"
				input2 = "@use_pathing_distance_updated.output"
			},
			
			{
				name = "test_from_player_index"
				operator = "ctrl_switch_float"
				input_switch = "@public.position_force_from_player"
				input2 = "-1"
				input1 = "@source_info.output_entity_index"
			},
			
			{
				name = "get_entity_info"
				input_execute = "1"
				operator = "game_entity_info"
				input_entity_index = "@test_from_player_index.output"
				input_default_world_position = "@public.position"
				input_default_local_position = "@globals.output_listener_front"
				input_hold_position_on_deleted_entity = "@public.hold_position_on_deleted_entity"
				use_world_position = "@public.position_force_from_input"
				attachment = "@public.attachment"
			},
			
			{
				name = "uiposition_elements"
				input_execute = "@public.use_uiposition"
				operator = "util_elements_float3"
				input = "@public.uiposition"
			},
			
			{
				name = "uiposition_left"
				input_execute = "@public.use_uiposition"
				operator = "math_scale_float3"
				input1 = "@globals.output_listener_left"
				input2 = "@uiposition_elements.output_0"
			},
			
			{
				name = "uiposition_forward"
				input_execute = "@public.use_uiposition"
				operator = "math_scale_float3"
				input1 = "@globals.output_listener_forward"
				input2 = "@uiposition_elements.output_1"
			},
			
			{
				name = "uiposition_up"
				input_execute = "@public.use_uiposition"
				operator = "math_scale_float3"
				input1 = "@globals.output_listener_up"
				input2 = "@uiposition_elements.output_2"
			},
			
			{
				name = "uiposition_calc_step"
				input_execute = "@public.use_uiposition"
				operator = "math_float3"
				apply = "add"
				input1 = "@uiposition_left.output"
				input2 = "@uiposition_forward.output"
			},
			
			{
				name = "uiposition_calc"
				input_execute = "@public.use_uiposition"
				operator = "math_float3"
				apply = "add"
				input1 = "@uiposition_calc_step.output"
				input2 = "@uiposition_up.output"
			},
			
			{
				name = "uiposition_final"
				operator = "math_float3"
				apply = "add"
				input1 = "@get_entity_info.output_position"
				input2 = "@uiposition_calc.output"
			},
			
			{
				name = "add_position_offset"
				operator = "math_float3"
				apply = "add"
				input1 = "@uiposition_final.output"
				input2 = "@public.position_offset"
			},
			
			{
				name = "get_event_info"
				operator = "soundevent_get_info"
			},
			
			{
				name = "distance_to_source"
				operator = "calc_distance"
				input_position1 = "@add_position_offset.output"
				input_position2 = "@globals.output_listener_position"
			},
			
			{
				name = "params_steamaudio_source"
				operator = "process_steamaudio_source"
				input_execute = "@use_pathing_updated.output"
				input_source_position = "@add_position_offset.output"
				input_listener_position = "@globals.output_listener_position"
				input_pathing_enabled = "@use_pathing_updated.output"
				input_pathing_eq_enabled = "@public.use_pathing_render_eq"
				input_source_offset = 0
			},
			
			{
				name = "pathing_distance_ratio_updated"
				operator = "ctrl_switch_float"
				execute_once = "false"
				input_switch = "@use_pathing_distance_updated.output"
				input1 = "1.0"
				input2 = "@params_steamaudio_source.output_pathing_distance_ratio"
			},
			
			{
				name = "distance_to_source_updated"
				operator = "math_float"
				execute_once = "false"
				apply = "div"
				input1 = "@distance_to_source.output"
				input2 = "@pathing_distance_ratio_updated.output"
			},
			
			{
				name = "distance_filter"
				operator = "math_filter_float"
				input = "@distance_to_source_updated.output"
				input_max_velocity = "@public.distance_max_velocity"
			},
			
			{
				name = "ApplyEffect"
				operator = "vmix_apply_effect"
				input_owning_graph = "@public.effect_owning_graph"
				input_effect_name = "@public.effect_input_name"
				input_subgraph_name = "@public.effect_to_apply"
			},
			
			{
				name = "get_effect_health_amount"
				operator = "game_entity_get_health"
			},
			
			{
				name = "block_radius_logic"
				operator = "math_float"
				execute_once = "true"
				apply = "greater_than"
				input1 = "@distance_to_source.output"
				input2 = "@public.block_stop_radius_around_player"
			},
			
			{
				name = "import_block_stack"
				operator = "sos_import_stack"
				import_stack = "citadel_soundevent_block"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					position = 
					{
						data_type = "float3"
						value = "@add_position_offset.output"
					}
					block_test = 
					{
						data_type = "float"
						value = "@block_radius_logic.output"
					}
					block_execute = 
					{
						data_type = "float"
						value = "@block_radius_logic.output"
					}
				}
			},
			
			{
				name = "import_dist_limit"
				operator = "sos_import_stack"
				import_stack = "core_distance_limiter"
				operator_variables = 
				{
					distance = 
					{
						data_type = "float"
						value = "@distance_filter.output"
					}
					distance_max = 
					{
						data_type = "float"
						value = "@public.block_distance_max"
					}
				}
			},
			
			{
				name = "test_debug_radius"
				input_execute = "@public.debug_radius_inner"
				operator = "util_draw_radius"
				input_radius_min = "@public.debug_radius_inner"
				input_radius_max = "@public.debug_radius_outer"
				input_name = "@public.debug_string"
				input_position = "@add_position_offset.output"
			},
			
			{
				name = "facing_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1"
				input = "0"
				send_type = "facing"
			},
			
			{
				name = "remap_fade_out"
				operator = "math_curve_2d"
				input = "@get_event_info.output_stop_elapsed_time"
				public_field_name = "public.volume_fade_out_curve"
			},
			
			{
				name = "fade_out_unfinished"
				operator = "math_float"
				apply = "less_than"
				input1 = "@get_event_info.output_stop_elapsed_time"
				input2 = "@remap_fade_out.output_x_max"
			},
			
			{
				name = "calculate_is_unfinished_fading_out"
				operator = "math_float"
				apply = "min"
				input1 = "@fade_out_unfinished.output"
				input2 = "@public.use_volume_fade_out_curve"
			},
			
			{
				name = "calculate_unstopped"
				operator = "math_float"
				apply = "max"
				input1 = "@get_event_info.output_unstopped"
				input2 = "@calculate_is_unfinished_fading_out.output"
			},
			
			{
				name = "greater_than_cull_distance"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				apply = "greater_than"
				input1 = "@distance_to_source.output"
				input2 = "@public.cull_at_distance"
			},
			
			{
				name = "culling_and_unstopped"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				apply = "min"
				input1 = "@greater_than_cull_distance.output"
				input2 = "@calculate_unstopped.output"
			},
			
			{
				name = "calc_max_think_time_distance"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				execute_once = "true"
				apply = "mult"
				input1 = "@public.cull_at_distance"
				input2 = "2.000000"
			},
			
			{
				name = "calc_think_time_max_rand_val"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				execute_once = "true"
				apply = "mult"
				input1 = "@public.cull_think_time_max"
				input2 = "0.600000"
			},
			
			{
				name = "calc_random_max_think_time"
				operator = "math_random_float"
				input_execute = "@culling_and_unstopped.output"
				input_min = "@calc_think_time_max_rand_val.output"
				input_max = "@public.cull_think_time_max"
				round_to_int = "0"
			},
			
			{
				name = "calc_culling_think_time"
				operator = "math_remap_float"
				input_execute = "@culling_and_unstopped.output"
				input = "@distance_to_source.output"
				input_min = "@public.cull_at_distance"
				input_max = "@calc_max_think_time_distance.output"
				input_map_min = "@public.cull_think_time_min"
				input_map_max = "@calc_random_max_think_time.output"
			},
			
			{
				name = "culling_think_time_switch"
				operator = "ctrl_switch_float"
				input_switch = "@culling_and_unstopped.output"
				input1 = "-1.000000"
				input2 = "@calc_culling_think_time.output"
			},
			
			{
				name = "set_culling_dependency"
				input_execute = "@culling_and_unstopped.output"
				operator = "soundevent_control"
				input_add_dependent = "@culling_and_unstopped.output"
			},
			
			{
				name = "set_culling_wait_time"
				input_execute = "@culling_and_unstopped.output"
				operator = "soundevent_control"
				input_wait_time = "@culling_think_time_switch.output"
			},
			
			{
				name = "culling_goto_end"
				operator = "sos_goto"
				input_execute = "@culling_and_unstopped.output"
				execute_once = "false"
				input_goto_operator = "has_stop_time"
			},
			
			{
				name = "soundevent_limit_type_switch"
				operator = "ctrl_switch_float"
				input_switch = "@public.limiter_match_type"
				input1 = "-1"
				input2 = "@public.event_type"
			},
			
			{
				name = "soundevent_limit"
				execute_once = "true"
				operator = "soundevent_limiter"
				input_execute = "@public.limiter_on"
				input_max_events = "@public.limiter_max"
				match_event_type = "@soundevent_limit_type_switch.output"
				match_entity = "@public.limiter_match_entity"
				match_substring = "@public.limiter_match_substring"
				match_event_name = "@public.limiter_event_name"
				stop_oldest = "@public.limiter_stop_oldest"
				match_duration_type = "greater_than_or_equal"
				match_event_duration = "@public.limiter_match_event_duration"
				match_this_event = "@public.limiter_match_event"
			},
			
			{
				name = "volume_to_gain"
				operator = "math_db_to_gain"
				input = "@public.volume"
			},
			
			{
				name = "volume_rand_min_to_gain"
				operator = "math_db_to_gain"
				input = "@public.volume_rand_max"
			},
			
			{
				name = "volume_rand_max_to_gain"
				operator = "math_db_to_gain"
				input = "@public.volume_rand_min"
			},
			
			{
				name = "volume_random"
				operator = "math_randomize_float"
				execute_once = "true"
				input = "1.000000"
				input_rand_min = "@volume_rand_min_to_gain.output"
				input_rand_max = "@volume_rand_max_to_gain.output"
			},
			
			{
				name = "block_pitch_from_code_switch"
				operator = "ctrl_switch_float"
				input1 = "@public.pitch"
				input2 = "@public.pitch_force_input_to_value"
				input_switch = "@public.pitch_force_input_to_value"
			},
			
			{
				name = "pitch_random"
				operator = "math_randomize_float"
				execute_once = "true"
				input = "@block_pitch_from_code_switch.output"
				input_rand_min = "@public.pitch_rand_min"
				input_rand_max = "@public.pitch_rand_max"
			},
			
			{
				name = "pitch_mod"
				operator = "math_parameter_accumulator"
				execute_once = "true"
				input = "@public.pitch_modulation_max"
				attack = "@public.pitch_modulation_attack"
				release = "@public.pitch_modulation_release"
				namespace = "@public.pitch_modulation_namespace"
				baseline = "1.0"
			},
			
			{
				name = "pitch_mult"
				operator = "math_float"
				apply = "mult"
				execute_once = "true"
				input1 = "@pitch_mod.output"
				input2 = "@pitch_random.output"
			},
			
			{
				name = "delay_random"
				operator = "math_randomize_float"
				execute_once = "true"
				input = "@public.delay"
				input_rand_min = "@public.delay_rand_min"
				input_rand_max = "@public.delay_rand_max"
			},
			
			{
				name = "remap_delay_distance"
				operator = "math_curve_2d_4knot"
				curve_type = "linear"
				execute_once = "1.000000"
				input = "@distance_to_source.output"
				input_X1 = "0.000000"
				input_Y1 = "0.000000"
				input_X2 = "100.000000"
				input_Y2 = "0.100000"
				input_X3 = "1000.000000"
				input_Y3 = "0.150000"
				input_X4 = "1000.000000"
				input_Y4 = "0.150000"
			},
			
			{
				name = "switch_delay"
				operator = "ctrl_switch_float"
				input_switch = "@public.delay_use_distance_curve"
				input1 = "@delay_random.output"
				input2 = "@remap_delay_distance.output"
			},
			
			{
				name = "calc_doppler"
				input_execute = "@public.doppler_on"
				operator = "math_calc_doppler"
				input_source_position = "@add_position_offset.output"
				input_observer_position = "@globals.output_listener_position"
				input_doppler_factor = "@public.doppler_factor"
				input_doppler_factor_receding = "@public.doppler_factor_receding"
				input_doppler_observer_scale = "0.050000"
			},
			
			{
				name = "doppler_filter"
				operator = "math_filter_float"
				input = "@calc_doppler.output"
				input_max_velocity = "1.000000"
			},
			
			{
				name = "mult_pitch_doppler"
				operator = "math_float"
				apply = "mult"
				input1 = "@pitch_mult.output"
				input2 = "@doppler_filter.output"
			},
			
			{
				name = "pitch_adjustment"
				operator = "math_float"
				apply = "mult"
				input1 = "@public.pitch_adjust"
				input2 = "@mult_pitch_doppler.output"
			},
			
			{
				name = "mixer"
				operator = "soundmixer_get_mixgroup"
				mixgroup = "@public.mixer_mixgroup"
				input_class_name = "@source_info.output_entity_classname"
				input_is_player = "false"
				input_soundlevel = "60"
				input_event_type = "@public.event_type"
			},
			
			{
				name = "occlusion_mixer_mult"
				operator = "math_float"
				apply = "mult"
				input1 = "@public.occlusion_scale"
				input2 = "@mixer.output_level"
			},
			
			{
				name = "occlusion"
				operator = "calc_occlusion_src2"
				input_scalar = "@occlusion_mixer_mult.output"
				input_radius = "@public.occlusion_radius"
				min_output = "@public.occlusion_min"
				max_output = "@public.occlusion_max"
				input_source_position = "@add_position_offset.output"
				input_listener_position = "@globals.output_listener_position"
				input_trace_interval = "@public.occlusion_interval"
			},
			
			{
				name = "occlusion_filter"
				operator = "math_filter_float"
				input = "@occlusion.output"
				input_max_velocity = "@public.occlusion_max_velocity"
			},
			
			{
				name = "occlusion_submix_math_invert"
				operator = "math_float"
				apply = "sub"
				input1 = "1.000000"
				input2 = "@occlusion_filter.output"
			},
			
			{
				name = "volume_falloff"
				operator = "math_curve_2d"
				input = "@distance_filter.output"
				public_field_name = "public.volume_distance_falloff_curve"
			},
			
			{
				name = "volume_fade_in"
				operator = "math_remap_float"
				input = "@get_event_info.output_elapsed_time"
				input_min = "0.000000"
				input_max = "@public.volume_fade_in"
				input_map_min = "0.000000"
				input_map_max = "1.000000"
				default_to_max = "true"
			},
			
			{
				name = "remap_fade_over_time"
				operator = "math_curve_2d"
				input = "@get_event_info.output_elapsed_time"
				public_field_name = "public.volume_fade_over_time_curve"
			},
			
			{
				name = "volume_atten_override_switch"
				operator = "ctrl_switch_float"
				input1 = "@public.volume_atten"
				input2 = "@public.volume_atten_override"
				input_switch = "@public.volume_atten_override"
			},
			
			{
				name = "citadel_facing_atten"
				input_execute = "@public.facing_vol_attenuation_on"
				operator = "sos_import_stack"
				import_stack = "citadel_facing_atten"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					listener_forward = 
					{
						data_type = "float3"
						value = "@globals.output_listener_forward"
					}
					listener_position = 
					{
						data_type = "float3"
						value = "@globals.output_listener_position"
					}
					source_position = 
					{
						data_type = "float3"
						value = "@add_position_offset.output"
					}
					facing_mult = 
					{
						data_type = "float"
						value = "1.000000"
					}
					facing_min = 
					{
						data_type = "float"
						value = "0.0000"
					}
					facing_max = 
					{
						data_type = "float"
						value = "1.00000"
					}
					facing_scale_min = 
					{
						data_type = "float"
						value = "0.000000"
					}
					facing_scale_max = 
					{
						data_type = "float"
						value = "1.000000"
					}
				}
			},
			
			{
				name = "reverb_send_distance_curve"
				operator = "math_curve_2d"
				input = "@distance_filter.output"
				public_field_name = "public.reverb_falloff_curve"
				input_scale_x = "@public.reverb_curve_max_distance"
				input_scale_y = "@public.reverb_curve_scale_y"
			},
			
			{
				name = "reverb_control_switch"
				operator = "ctrl_switch_float"
				input1 = "@public.reverb_xfade_value"
				input2 = "@reverb_send_distance_curve.output"
				input_switch = "@public.reverb_use_curve"
			},
			
			{
				name = "reverb_mixer_mult"
				operator = "math_float"
				apply = "mult"
				input1 = "@mixer.output_dsp"
				input2 = "@reverb_control_switch.output"
			},
			
			{
				name = "reverb_send_crossfader"
				input_execute = "1"
				operator = "sos_import_stack"
				import_stack = "send_crossfader"
				auto_connect_public_fields = "false"
				operator_variables = 
				{
					wet_mix = 
					{
						data_type = "float"
						value = "@reverb_mixer_mult.output"
					}
				}
			},
			
			{
				name = "occlusion_send_crossfader"
				input_execute = "1"
				operator = "sos_import_stack"
				import_stack = "send_crossfader"
				auto_connect_public_fields = "false"
				operator_variables = 
				{
					wet_mix = 
					{
						data_type = "float"
						value = "0"
					}
					wet_Y2 = 
					{
						data_type = "float"
						value = "0.800000"
					}
					dry_Y2 = 
					{
						data_type = "float"
						value = "0.200000"
					}
				}
			},
			
			{
				name = "volume_convar_switch"
				operator = "ctrl_switch_float"
				input1 = 1.000000
				input2 = "@globals.output_snd_musicvolume_convar"
				input_switch = "@public.event_use_music_convar"
			},
			
			{
				name = "check_recency_bias_invalid"
				input_execute = "1.0"
				operator = "math_float"
				apply = "equal"
				input1 = "@public.recency_bias"
				input2 = "-1.0"
			},
			
			{
				name = "recency_bias_ease"
				input_execute = "1.0"
				operator = "math_func_float"
				function = "ease_sin_out"
				input1 = "@public.recency_bias"
			},
			
			{
				name = "remap_recency_bias_linear_vol"
				operator = "math_remap_float"
				input_execute = "1.0"
				input = "@recency_bias_ease.output"
				input_min = "0.0"
				input_max = "1.0"
				input_map_min = "@public.recency_bias_min_scale"
				input_map_max = "@public.recency_bias_max_scale"
				default_to_max = "false"
			},
			
			{
				name = "volume_accumulate_pre_reverb"
				operator = "math_accumulate12_float"
				apply = "mult"
				input2 = "@mixer.output_volume"
				input3 = "@volume_to_gain.output"
				input4 = "@volume_falloff.output"
				input5 = "@volume_fade_in.output"
				input6 = "@volume_convar_switch.output"
				input8 = "@public.volume_mult"
				input9 = "@volume_atten_override_switch.output"
				input10 = "@remap_recency_bias_linear_vol.output"
				input11 = "@remap_fade_out.output"
				input12 = "@remap_fade_over_time.output"
			},
			
			{
				name = "volume_filter"
				operator = "math_filter_float"
				input = "@volume_accumulate_pre_reverb.output"
				input_max_velocity = "@public.volume_filter_amount"
			},
			
			{
				name = "volume_occlusion_mult_dry"
				operator = "math_float"
				apply = "mult"
				input1 = "@volume_filter.output"
				input2 = "@occlusion_send_crossfader::output.dry"
			},
			
			{
				name = "occlusion_mult_wet_mix"
				operator = "math_float"
				apply = "mult"
				input1 = "@volume_filter.output"
				input2 = "@occlusion_send_crossfader::output.wet"
			},
			
			{
				name = "volume_mult_dry"
				operator = "math_float"
				apply = "mult"
				input1 = "@volume_occlusion_mult_dry.output"
				input2 = "@reverb_send_crossfader::output.dry"
			},
			
			{
				name = "reverb_mult_wet_mix"
				operator = "math_float"
				apply = "mult"
				input1 = "@volume_filter.output"
				input2 = "@reverb_send_crossfader::output.wet"
			},
			
			{
				name = "mixer_trigger"
				operator = "soundmixer_set_trigger"
				input_trigger = "@volume_filter.output"
				input_mixgroups = "@mixer.output_mixgroups"
			},
			
			{
				name = "mixlayer_input_switch"
				operator = "ctrl_switch_float"
				input_execute = "@public.mixer_set_mixlayer"
				input_switch = "@public.mixer_mixlayer_amount_manual"
				input1 = "@volume_filter.output"
				input2 = "@public.mixer_mixlayer_amount_manual"
			},
			
			{
				name = "mixer_set_mixlayer"
				operator = "soundmixer_set_mixlayer_amount"
				input_execute = "@public.mixer_set_mixlayer"
				input = "@mixlayer_input_switch.output"
				mixlayer = "@public.mixer_mixlayer_to_set"
			},
			
			{
				name = "citadel_send_selector"
				input_execute = "1"
				operator = "sos_import_stack"
				import_stack = "citadel_send_selector"
				auto_connect_public_fields = "false"
				operator_variables = 
				{
					send_name = 
					{
						value = "@public.send_name"
					}
					send_volume = 
					{
						value = "@volume_mult_dry.output"
					}
				}
			},
			
			{
				name = "mult_duck_amount"
				operator = "math_float"
				apply = "mult"
				input1 = "@volume_filter.output"
				input2 = "@public.ambient_ducking_pct"
			},
			
			{
				name = "duck_ambient_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1.000000"
				submix_name = "DuckAmbient"
				input = "@mult_duck_amount.output"
				send_type = "named"
			},
			
			{
				name = "reverb_mult_submix_level"
				operator = "math_float"
				apply = "mult"
				input1 = "@reverb_mult_wet_mix.output"
				input2 = "@citadel_send_selector::submix_level.output"
			},
			
			{
				name = "reverb_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1.000000"
				execute_once = "false"
				input = "@reverb_mult_submix_level.output"
				submix_name = "reverb"
				send_type = "named"
			},
			
			{
				name = "occlusion_mult_submix_level"
				operator = "math_float"
				apply = "mult"
				input1 = "@occlusion_mult_wet_mix.output"
				input2 = "@citadel_send_selector::submix_level.output"
			},
			
			{
				name = "occlusion_submix_send"
				operator = "vmix_mixgraph_send"
				input_execute = "1.000000"
				submix_name = "Occlusion"
				input = "@occlusion_mult_submix_level.output"
				send_type = "named"
			},
			
			{
				name = "occlusion_volume_attenuation"
				operator = "sos_import_stack"
				import_stack = "citadel_occlusion_volume_attenuation"
				operator_variables = 
				{
					occlusion_gain_value = 
					{
						data_type = "float"
						value = "@occlusion_filter.output"
					}
					distance = 
					{
						data_type = "float"
						value = "@distance_filter.output"
					}
					distance_min = 
					{
						data_type = "float"
						value = "@public.occlusion_volume_blend_distance_min"
					}
					distance_max = 
					{
						data_type = "float"
						value = "@public.occlusion_volume_blend_distance_max"
					}
				}
			},
			
			{
				name = "speakers_spatialize"
				operator = "calc_spatialize_speakers_hrtf"
				execute_once = "@public.position_force_static"
				input_360_listener = 0.000000
				input_listener_angles = "@globals.output_listener_angles"
				input_hrtf_on = "@public.hrtf_on"
				input_hrtf_mix = "@public.hrtf_mix"
				input_distance = "@distance_filter.output"
				input_source_position = "@add_position_offset.output"
				input_listener_position = "@globals.output_listener_position"
				input_listener_left = "@globals.output_listener_left"
				input_listener_forward = "@globals.output_listener_forward"
				input_listener_up = "@globals.output_listener_up"
				input_spread_min_distance = "@public.spread_min"
				input_spread_max_distance = "@public.spread_max"
				input_spread_max_value = "@public.spread_max_value"
				input_spread_min_value = "@public.spread_min_value"
			},
			
			{
				name = "has_stop_time"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.event_stop_at_time"
				input2 = "0.000000"
			},
			
			{
				name = "stop_at_time"
				operator = "soundevent_control"
				input_stop_at_time = "@public.event_stop_at_time"
			},
			
			{
				name = "get_vsnd"
				execute_once = "true"
				operator = "opvar_get_vsnd"
				check_event_data = "true"
				input_operator_name = "public"
				input_field_name = "@public.vsnd_files_field_name"
				input_use_namespace = "false"
				array_selection_type = "@public.vsnd_selection_type"
				input_index = "@public.vsnd_selection_index"
			},
			
			{
				name = "pitch_mult_ambient"
				input_execute = "1.000000"
				operator = "math_float"
				apply = "mult"
				input1 = "@public.pitch_external"
				input2 = "@pitch_adjustment.output"
			},
			
			{
				name = "pitch_filter"
				operator = "math_filter_float"
				input = "@pitch_mult_ambient.output"
				input_max_velocity = "@public.pitch_filter_rate"
			},
			
			{
				name = "culling_invert"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				apply = "sub"
				input1 = "1.000000"
				input2 = "@greater_than_cull_distance.output"
			},
			
			{
				name = "not_culling_and_unstopped"
				operator = "math_float"
				input_execute = "@public.cull_at_distance"
				apply = "min"
				input1 = "@culling_invert.output"
				input2 = "@calculate_unstopped.output"
			},
			
			{
				name = "switch_start_mode"
				operator = "ctrl_switch_float"
				input_switch = "@public.cull_at_distance"
				input1 = "@calculate_unstopped.output"
				input2 = "@not_culling_and_unstopped.output"
			},
			
			{
				name = "start_vmix"
				operator = "vmix_voice_start"
				input_execute = "1"
				input_track1 = "track_01"
				input_start2 = "0.000000"
				input_start3 = "0.000000"
				input_start4 = "0.000000"
				input_start5 = "0.000000"
				input_start6 = "0.000000"
				input_start7 = "0.000000"
				input_start8 = "0.000000"
				input_vsnd1 = "@get_vsnd.output"
				execute_once = "false"
				input_should_pause = "@public.vsnd_pause_with_game"
				input_should_play_tail = "@public.vsnd_play_loop_release"
				input_start = "@switch_start_mode.output"
				input_speaker_volumes = "@speakers_spatialize.output"
				input_pitch = "@pitch_filter.output"
				input_fade_out = "@public.volume_fade_out"
				input_delay = "@switch_delay.output"
				input_memory_type = "@public.memory_type"
			},
			
			{
				name = "reset_mixlayer"
				operator = "soundmixer_set_mixlayer_amount"
				input_execute = "@start_vmix.output_voice_finished"
				input = "0.000000"
				mixlayer = "@public.mixer_mixlayer_to_set"
			},
			
			{
				name = "send_hrtf_on"
				input_execute = "1"
				operator = "vmix_voicegraph_input"
				input_name = "hrtf_on"
				input = "@speakers_spatialize.output_hrtf_on"
			},
			
			{
				name = "send_voicegraph_hrtf_mix_level"
				input_execute = "1"
				operator = "vmix_voicegraph_input"
				input_name = "hrtf_mix"
				input = "@speakers_spatialize.output_hrtf_mix"
			},
			
			{
				name = "send_voicegraph_pathing"
				input_execute = "1"
				operator = "vmix_voicegraph_input"
				input_name = "pathing_on"
				input = "@use_pathing_render_updated.output"
			},
			
			{
				name = "send_voicegraph_pathing_mix_level"
				input_execute = "@use_pathing_render_updated.output"
				operator = "vmix_voicegraph_input"
				input_name = "pathing_mix_level"
				input = "@public.pathing_render_mix"
			},
			
			{
				name = "send_voicegraph_pathing_eq"
				input_execute = "@use_pathing_render_updated.output"
				operator = "vmix_voicegraph_inputarray"
				input_name = "pathing_eq"
				input = "@params_steamaudio_source.output_pathing_eq"
			},
			
			{
				name = "send_voicegraph_pathing_coeffs"
				input_execute = "@use_pathing_render_updated.output"
				operator = "vmix_voicegraph_inputarray"
				input_name = "pathing_coeffs"
				input = "@params_steamaudio_source.output_pathing_coeffs"
			},
			
			{
				name = "apply_effect_amount"
				input_execute = "@public.should_apply_effect_amount"
				operator = "vmix_mixgraph_input"
				input = "@public.effect_amount"
				input_name = "fx.Player_Damage.Amount"
			},
			
			{
				name = "apply_hero_mix_vo_effect"
				operator = "vmix_apply_effect"
				input_owning_graph = "main"
				input_execute = "@public.should_apply_effect_amount"
				input_effect_name = "effect.vo"
				input_subgraph_name = "fx.ability_affected_vo"
			},
			
			{
				name = "check_radio_effect_distance"
				input_execute = "@public.apply_radio_effect_for_voice"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@distance_filter.output"
				input2 = "@public.voice_radio_effect_distance_threshold"
			},
			
			{
				name = "apply_hero_voice_VO_effect"
				operator = "vmix_voicegraph_name_input"
				input_execute = "@check_radio_effect_distance.output"
				input_name = "effect.voiceEffect"
				input_dsp_preset_name = "fx.radio_voice"
			},
			
			{
				name = "enable_distance_hpf"
				input_execute = "1"
				operator = "vmix_voicegraph_input"
				input_name = "distance_hpf_on"
				input = "@public.distance_hpf_on"
			},
			
			{
				name = "enable_distance_lpf"
				input_execute = "1"
				operator = "vmix_voicegraph_input"
				input_name = "distance_lpf_on"
				input = "@public.distance_lpf_on"
			},
			
			{
				name = "occlusion_vmix_send"
				input_execute = "1"
				operator = "vmix_voicegraph_input"
				input_name = "occlusion"
				input = "@occlusion.output"
			},
			
			{
				name = "occlusion_min_vmix_send"
				input_execute = "1"
				operator = "vmix_voicegraph_input"
				input_name = "occlusion_min"
				input = "@public.occlusion_min"
			},
			
			{
				name = "facing_vmix_send"
				input_execute = "1"
				operator = "vmix_voicegraph_input"
				input_name = "facing"
				input = "@citadel_facing_atten::output.scaled_val"
			},
			
			{
				name = "mono_downmix"
				input_execute = "1"
				operator = "sos_import_stack"
				import_stack = "citadel_mono_downmix"
				auto_connect_public_fields = "false"
				operator_variables = 
				{
					mono_downmix_enabled = 
					{
						data_type = "float"
						value = "@public.mono_downmix_enabled"
					}
					mono_downmix_min_distance = 
					{
						data_type = "float"
						value = "@public.mono_downmix_min_distance"
					}
					mono_downmix_max_distance = 
					{
						data_type = "float"
						value = "@public.mono_downmix_max_distance"
					}
					distance = 
					{
						data_type = "float"
						value = "@distance_filter.output"
					}
				}
			},
		]
		_system_properties = 
		{
			display_game = "citadel"
		}
	}
}