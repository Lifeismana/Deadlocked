<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
	citadel_perspective_default = 
	{
		operators = 
		[
			
			{
				name = "_builtins"
				operator = "sos_builtins"
				_voicegraph = "citadel.hrtf_basic"
			},
			
			{
				name = "public"
				operator = "util_null"
				operator_variables = 
				{
					import_public_opvars = "citadel_default_3d"
					volume_falloff_min_player = 
					{
						data_type = "float"
						value = "99999.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Min volume falloff for player perspective. Perspective describes a sound's owning entity relationship to the local player."
						}
					}
					volume_falloff_min_team = 
					{
						data_type = "float"
						value = "200.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Min volume falloff for team perspective."
						}
					}
					volume_falloff_min_opponent = 
					{
						data_type = "float"
						value = "200.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Min volume falloff for opponent perspective."
						}
					}
					volume_falloff_min_neutral = 
					{
						data_type = "float"
						value = "200.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Min volume falloff for neutral perspective."
						}
					}
					volume_falloff_max_player = 
					{
						data_type = "float"
						value = "99999.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for player perspective."
						}
					}
					volume_falloff_max_team = 
					{
						data_type = "float"
						value = "7000.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for team perspective."
						}
					}
					volume_falloff_max_opponent = 
					{
						data_type = "float"
						value = "7000.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for opponent perspective."
						}
					}
					volume_falloff_max_neutral = 
					{
						data_type = "float"
						value = "7000.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Max volume falloff for neutral perspective."
						}
					}
					volume_falloff_curve_db = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "locked"
							display_edit_type = "none"
							property_group = "Perspective - Volume Falloff"
							property_help = "Overwritten by perspective stack and forwarded to citadel_default_3d"
						}
					}
					volume_falloff_curve_db_player = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
						}
					}
					volume_falloff_curve_db_team = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
						}
					}
					volume_falloff_curve_db_opponent = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
						}
					}
					volume_falloff_curve_db_neutral = 
					{
						data_type = "float6"
						soundevent_data = "true"
						value = 
						[
							"[ 0.005714, 0.3, 1.083, 1.083, 2.0, 3.0 ]",
							"[ 6.619538, 0.0, -0.311869, -0.311869, 2.0, 3.0 ]",
							"[ 17.077585, -10.603477, -0.127606, -0.127606, 2.0, 3.0 ]",
						]
						_system_properties = 
						{
							display_group = "advanced"
							display_edit_type = "field_curve_2d_editor"
							property_group = "Perspective - Volume Falloff"
						}
					}
					volume_enemy_targeting_boost = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Relevance"
							property_help = "Volume in db that will boost this sound if its owning entity is targeting the local player."
						}
					}
					volume = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume"
							property_help = "Base volume for sound in db."
						}
					}
					volume_falloff_floor = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Falloff"
							property_help = "Minimum linear scale volume for a sound."
						}
					}
					volume_falloff_floor_enemy_relevance = 
					{
						data_type = "float"
						value = "1.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Relevance"
							property_help = "Minimum linear scale volume for a sound with a relevance score > 0. Scales to its full value between relevance 0 to 1."
						}
					}
					volume_falloff_floor_enemy_targeting = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Relevance"
							property_help = "Minimum linear scale volume for a sound with an owner that is targeting the local player."
						}
					}
					volume_offset_player = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Offset"
							property_help = "Volume offset in db from the base _volume_ parameter for the player perspective."
						}
					}
					volume_offset_team = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Offset"
							property_help = "Volume offset in db from the base _volume_ parameter for the team perspective."
						}
					}
					volume_offset_opponent = 
					{
						data_type = "float"
						value = "0.00000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Offset"
							property_help = "Volume offset in db from the base _volume_ parameter for the opponent perspective."
						}
					}
					volume_offset_neutral = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Volume Offset"
							property_help = "Volume offset in db from the base _volume_ parameter for the neutral perspective."
						}
					}
					spread_max_value_player = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Spread"
							property_help = "The value of spread when it is at its maximum (the min distance)."
						}
					}
					spread_max_value_team = 
					{
						data_type = "float"
						value = "0.100000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Spread"
							property_help = "The value of spread when it is at its maximum (the min distance)."
						}
					}
					spread_max_value_opponent = 
					{
						data_type = "float"
						value = "0.10000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Spread"
							property_help = "The value of spread when it is at its maximum (the min distance)."
						}
					}
					spread_max_value_neutral = 
					{
						data_type = "float"
						value = "0.100000"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Spread"
							property_help = "The value of spread when it is at its maximum (the min distance)."
						}
					}
					play_from_listener_player = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Play From Listener"
							property_help = "When perspective for this sound is _player_, play it from the listener position. This is good for things like casting abilities and weapon fire."
						}
					}
					play_from_listener_team = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "locked"
							property_group = "Perspective - Play From Listener"
						}
					}
					play_from_listener_opponent = 
					{
						data_type = "float"
						value = "0.00000"
						_system_properties = 
						{
							display_group = "locked"
							property_group = "Perspective - Play From Listener"
						}
					}
					play_from_listener_neutral = 
					{
						data_type = "float"
						value = "0.000000"
						_system_properties = 
						{
							display_group = "locked"
							property_group = "Perspective - Play From Listener"
						}
					}
					owner_entity_index = 
					{
						data_type = "float"
						value = "-1.0"
						_system_properties = 
						{
							display_group = "locked"
							property_group = "Perspective"
							property_help = "This field is set by game code and used as the basis to determine perspective. This is generally set in code. If not, perspective will derive from the entity the sound is attached to."
						}
					}
					force_entity_perspective_assignment = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective"
							property_help = "Force the assignment of perspective to use the entity that the sound is playing on, not the owner_entity_index."
						}
					}
					mix_group_prefix = 
					{
						data_type = "string"
						value = "All"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The prefix of the mixgroup before it has been combined with the mix_group_suffix_PERSPECTIVE"
						}
					}
					mix_group_suffix_player = 
					{
						data_type = "string"
						value = "-Pla"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The suffix of the mixgroup before it has been combined with the mix_group_prefix"
						}
					}
					mix_group_suffix_team = 
					{
						data_type = "string"
						value = "-Tea"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The suffix of the mixgroup before it has been combined with the mix_group_prefix"
						}
					}
					mix_group_suffix_opponent = 
					{
						data_type = "string"
						value = "-Opp"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The suffix of the mixgroup before it has been combined with the mix_group_prefix"
						}
					}
					mix_group_suffix_neutral = 
					{
						data_type = "string"
						value = "-Neu"
						_system_properties = 
						{
							display_group = "Normal"
							property_group = "Perspective - Mixgroup"
							property_help = "The suffix of the mixgroup before it has been combined with the mix_group_prefix"
						}
					}
					param_envelope_duration = 
					{
						data_type = "float"
						value = "-1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					param_envelope_enabled = 
					{
						data_type = "float"
						value = "0.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					pitch_envelope_scale_min = 
					{
						data_type = "float"
						value = ".85"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					pitch_envelope_scale_max = 
					{
						data_type = "float"
						value = "1.5"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					hrtf_on_player = 
					{
						data_type = "float"
						value = "0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "player"
						}
					}
					hpf_non_player_enabled = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					lpf_non_player_enabled = 
					{
						data_type = "float"
						value = "1.0"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					occlusion_scale_non_player = 
					{
						data_type = "float"
						value = ".9"
						_system_properties = 
						{
							property_group = "Perspective"
							display_group = "advanced"
						}
					}
					mixer_set_mixlayer_for_perspective = 
					{
						data_type = "float"
						value = "-1"
						_system_properties = 
						{
							property_group = "Perspective - Mix Layers"
						}
					}
				}
			},
			
			{
				name = "check_param_envelope_duration_valid"
				input_execute = "1.0"
				operator = "math_float"
				apply = "greater_than"
				input1 = "@public.param_envelope_duration"
				input2 = "0.0"
			},
			
			{
				name = "check_enable_param_envelope"
				input_execute = "1.0"
				operator = "math_float"
				apply = "greater_than_or_equal"
				input1 = "@public.param_envelope_enabled"
				input2 = "1.0"
			},
			
			{
				name = "mult_param_envelope_enabled"
				input_execute = "@check_enable_param_envelope.output"
				operator = "math_float"
				apply = "mult"
				input1 = "@check_enable_param_envelope.output"
				input2 = "@check_param_envelope_duration_valid.output"
			},
			
			{
				name = "div_param_envelope_elapsed_time"
				input_execute = "@mult_param_envelope_enabled.output"
				operator = "math_float"
				apply = "div"
				input1 = "@citadel_default_3d::citadel_base_3d::get_event_info.output_elapsed_time"
				input2 = "@public.param_envelope_duration"
			},
			
			{
				name = "ease_param_envelope"
				input_execute = "1.0"
				operator = "math_func_float"
				function = "ease_sin_out"
				input1 = "@div_param_envelope_elapsed_time.output"
			},
			
			{
				name = "remap_progress_envelope_to_pitch_scale"
				operator = "math_remap_float"
				input_execute = "@mult_param_envelope_enabled.output"
				input = "@ease_param_envelope.output"
				input_min = "0.0"
				input_max = "1.0"
				input_map_min = "@public.pitch_envelope_scale_min"
				input_map_max = "@public.pitch_envelope_scale_max"
				default_to_max = "false"
			},
			
			{
				name = "switch_pitch_external"
				operator = "ctrl_switch_float"
				input_switch = "@mult_param_envelope_enabled.output"
				input1 = "1"
				input2 = "@remap_progress_envelope_to_pitch_scale.output"
			},
			
			{
				name = "citadel_find_perspective"
				operator = "sos_import_stack"
				import_stack = "citadel_find_perspective"
				auto_connect_public_fields = "true"
			},
			
			{
				name = "perspective_switch_volume_falloff_min"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.volume_falloff_min_player"
				input_team_value = "@public.volume_falloff_min_team"
				input_opponent_value = "@public.volume_falloff_min_opponent"
				input_neutral_value = "@public.volume_falloff_min_neutral"
			},
			
			{
				name = "perspective_switch_volume_falloff_max"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.volume_falloff_max_player"
				input_team_value = "@public.volume_falloff_max_team"
				input_opponent_value = "@public.volume_falloff_max_opponent"
				input_neutral_value = "@public.volume_falloff_max_neutral"
			},
			
			{
				name = "perspective_switch_volume_curve_field_name"
				operator = "logic_perspective_switch_string"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "public.volume_falloff_curve_db_player"
				input_team_value = "public.volume_falloff_curve_db_team"
				input_opponent_value = "public.volume_falloff_curve_db_opponent"
				input_neutral_value = "public.volume_falloff_curve_db_neutral"
			},
			
			{
				name = "perspective_switch_volume"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.volume_offset_player"
				input_team_value = "@public.volume_offset_team"
				input_opponent_value = "@public.volume_offset_opponent"
				input_neutral_value = "@public.volume_offset_neutral"
			},
			
			{
				name = "math_perspective_volume_offset"
				input_execute = "1.0"
				operator = "math_float"
				apply = "add"
				input1 = "@perspective_switch_volume.output"
				input2 = "@public.volume"
			},
			
			{
				name = "perspective_switch_force_player_position"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.play_from_listener_player"
				input_team_value = "@public.play_from_listener_team"
				input_opponent_value = "@public.play_from_listener_opponent"
				input_neutral_value = "@public.play_from_listener_neutral"
			},
			
			{
				name = "perspective_switch_spread_max_value"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.spread_max_value_player"
				input_team_value = "@public.spread_max_value_team"
				input_opponent_value = "@public.spread_max_value_opponent"
				input_neutral_value = "@public.spread_max_value_neutral"
			},
			
			{
				name = "perspective_switch_occlusion_scale"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = 0.000000
				input_team_value = "@public.occlusion_scale_non_player"
				input_opponent_value = "@public.occlusion_scale_non_player"
				input_neutral_value = "@public.occlusion_scale_non_player"
			},
			
			{
				name = "perspective_switch_distance_hpf_on"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = 0.000000
				input_team_value = "@public.hpf_non_player_enabled"
				input_opponent_value = "@public.hpf_non_player_enabled"
				input_neutral_value = "@public.hpf_non_player_enabled"
			},
			
			{
				name = "perspective_switch_distance_lpf_on"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = 0.000000
				input_team_value = "@public.lpf_non_player_enabled"
				input_opponent_value = "@public.lpf_non_player_enabled"
				input_neutral_value = "@public.lpf_non_player_enabled"
			},
			
			{
				name = "perspective_switch_hrtf_on"
				operator = "logic_perspective_switch_float"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.hrtf_on_player"
				input_team_value = 1.000000
				input_opponent_value = 1.000000
				input_neutral_value = 1.000000
			},
			
			{
				name = "mix_group_suffix_switch"
				operator = "logic_perspective_switch_string"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_player_value = "@public.mix_group_suffix_player"
				input_team_value = "@public.mix_group_suffix_team"
				input_opponent_value = "@public.mix_group_suffix_opponent"
				input_neutral_value = "@public.mix_group_suffix_neutral"
			},
			
			{
				name = "concat_mix_group_strings"
				operator = "math_string"
				input_execute = "1"
				input1 = "@public.mix_group_prefix"
				input2 = "@mix_group_suffix_switch.output"
				apply = "add"
			},
			
			{
				name = "get_entity_relevance_value"
				operator = "entity_info_relevance"
				input_execute = "1"
				input_entity_index = "@public.owner_entity_index"
			},
			
			{
				name = "math_enemy_targeting_volume_scalar"
				input_execute = "1.0"
				operator = "math_float"
				apply = "mult"
				input1 = "@get_entity_relevance_value.output_is_targeting_local_player"
				input2 = "@public.volume_enemy_targeting_boost"
			},
			
			{
				name = "math_enemy_targeting_volume_boost"
				input_execute = "1.0"
				operator = "math_float"
				apply = "add"
				input1 = "@math_perspective_volume_offset.output"
				input2 = "@math_enemy_targeting_volume_scalar.output"
			},
			
			{
				name = "remap_volume_falloff_floor"
				operator = "math_remap_float"
				input_execute = "1"
				input = "@get_entity_relevance_value.output"
				input_min = "0.0"
				input_max = "1.0"
				input_map_min = "@public.volume_falloff_floor"
				input_map_max = "@public.volume_falloff_floor_enemy_relevance"
				default_to_max = "false"
			},
			
			{
				name = "math_enemy_targeting_volume_floor"
				input_execute = "1.0"
				operator = "math_float"
				apply = "mult"
				input1 = "@get_entity_relevance_value.output_is_targeting_local_player"
				input2 = "@public.volume_falloff_floor_enemy_targeting"
			},
			
			{
				name = "max_volume_floor"
				input_execute = "1.0"
				operator = "math_float"
				apply = "max"
				input1 = "@remap_volume_falloff_floor.output"
				input2 = "@math_enemy_targeting_volume_floor.output"
			},
			
			{
				name = "mixlayer_use_perspective"
				operator = "math_float"
				apply = "greater_than_or_equal"
				input1 = "@public.mixer_set_mixlayer_for_perspective"
				input2 = "0"
			},
			
			{
				name = "mixlayer_not_match_perspective"
				operator = "math_float"
				apply = "not_equal"
				input1 = "@public.mixer_set_mixlayer_for_perspective"
				input2 = "@citadel_find_perspective::game_entity_perspective.output"
			},
			
			{
				name = "mixlayer_should_disable"
				operator = "math_float"
				apply = "and"
				input1 = "@mixlayer_use_perspective.output"
				input2 = "@mixlayer_not_match_perspective.output"
			},
			
			{
				name = "citadel_default_3d"
				operator = "sos_import_stack"
				import_stack = "citadel_default_3d"
				auto_connect_public_fields = "true"
				operator_variables = 
				{
					volume_falloff_min = 
					{
						data_type = "float"
						value = "@perspective_switch_volume_falloff_min.output"
					}
					volume_falloff_max = 
					{
						data_type = "float"
						value = "@perspective_switch_volume_falloff_max.output"
					}
					volume = 
					{
						data_type = "float"
						value = "@math_enemy_targeting_volume_boost.output"
					}
					volume_falloff_floor = 
					{
						data_type = "float"
						value = "@max_volume_floor.output"
					}
					volume_falloff_curve_field_name = 
					{
						data_type = "string"
						value = "@perspective_switch_volume_curve_field_name.output"
					}
					position_force_from_player = 
					{
						data_type = "float"
						value = "@perspective_switch_force_player_position.output"
					}
					spread_max_value = 
					{
						data_type = "float"
						value = "@perspective_switch_spread_max_value.output"
					}
					occlusion_scale = 
					{
						data_type = "float"
						value = "@perspective_switch_occlusion_scale.output"
					}
					distance_hpf_on = 
					{
						data_type = "float"
						value = "@perspective_switch_distance_hpf_on.output"
					}
					distance_lpf_on = 
					{
						data_type = "float"
						value = "@perspective_switch_distance_lpf_on.output"
					}
					hrtf_on = 
					{
						data_type = "float"
						value = "@perspective_switch_hrtf_on.output"
					}
					mixer_mixgroup = 
					{
						data_type = "string"
						value = "@concat_mix_group_strings.output_string"
					}
					pitch_external = 
					{
						data_type = "float"
						value = "@switch_pitch_external.output"
					}
					mixer_mixlayer_disable = 
					{
						data_type = "float"
						value = "@mixlayer_should_disable.output"
					}
				}
			},
			
			{
				name = "draw_perspective"
				input_execute = "1"
				operator = "util_draw_perspective"
				input_participant_perspective = "@citadel_find_perspective::game_entity_perspective.output"
				input_name = "perspective"
				input_position = "@citadel_default_3d::citadel_base_3d::add_position_offset.output"
			},
			
			{
				name = "draw_relevance"
				input_execute = "1"
				operator = "util_draw_relevance"
				input_relevance_value = "@get_entity_relevance_value.output"
				input_name = ""
				input_position = "@citadel_default_3d::citadel_base_3d::add_position_offset.output"
			},
		]
	}
}